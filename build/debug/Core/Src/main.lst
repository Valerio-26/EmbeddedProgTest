ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB250:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** #include <stdlib.h>
  27:Core/Src/main.c **** 
  28:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  29:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  30:Core/Src/main.c **** 
  31:Core/Src/main.c **** /* USER CODE END PTD */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 2


  32:Core/Src/main.c **** 
  33:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  34:Core/Src/main.c **** /* USER CODE BEGIN PD */
  35:Core/Src/main.c **** #define ADC_BUFFER_SIZE 1
  36:Core/Src/main.c **** uint32_t adc_buffer[ADC_BUFFER_SIZE];
  37:Core/Src/main.c **** 
  38:Core/Src/main.c **** /* USER CODE END PD */
  39:Core/Src/main.c **** 
  40:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  41:Core/Src/main.c **** /* USER CODE BEGIN PM */
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** /* USER CODE END PM */
  44:Core/Src/main.c **** 
  45:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  46:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  47:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  50:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** UART_HandleTypeDef huart2;
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* USER CODE BEGIN PV */
  55:Core/Src/main.c **** uint32_t adc_value = 0;
  56:Core/Src/main.c **** FsmController fsm;
  57:Core/Src/main.c **** /* USER CODE END PV */
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  60:Core/Src/main.c **** void SystemClock_Config(void);
  61:Core/Src/main.c **** static void MX_GPIO_Init(void);
  62:Core/Src/main.c **** static void MX_DMA_Init(void);
  63:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  64:Core/Src/main.c **** static void MX_ADC1_Init(void);
  65:Core/Src/main.c **** static void MX_TIM2_Init(void);
  66:Core/Src/main.c **** static void MX_TIM3_Init(void);
  67:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** /* USER CODE END PFP */
  70:Core/Src/main.c **** 
  71:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  72:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  73:Core/Src/main.c **** void send_to_serial(char *msg) {
  74:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  75:Core/Src/main.c **** }
  76:Core/Src/main.c **** 
  77:Core/Src/main.c **** /* USER CODE END 0 */
  78:Core/Src/main.c **** 
  79:Core/Src/main.c **** /**
  80:Core/Src/main.c ****   * @brief  The application entry point.
  81:Core/Src/main.c ****   * @retval int
  82:Core/Src/main.c ****   */
  83:Core/Src/main.c **** int main(void)
  84:Core/Src/main.c **** {
  85:Core/Src/main.c **** 
  86:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  87:Core/Src/main.c **** 
  88:Core/Src/main.c ****   /* USER CODE END 1 */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 3


  89:Core/Src/main.c **** 
  90:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  91:Core/Src/main.c **** 
  92:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  93:Core/Src/main.c ****   HAL_Init();
  94:Core/Src/main.c **** 
  95:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  96:Core/Src/main.c ****   fsm_init(&fsm);
  97:Core/Src/main.c ****   srand(HAL_GetTick());
  98:Core/Src/main.c ****   /* USER CODE END Init */
  99:Core/Src/main.c **** 
 100:Core/Src/main.c ****   /* Configure the system clock */
 101:Core/Src/main.c ****   SystemClock_Config();
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* USER CODE END SysInit */
 106:Core/Src/main.c **** 
 107:Core/Src/main.c ****   /* Initialize all configured peripherals */
 108:Core/Src/main.c ****   MX_GPIO_Init();
 109:Core/Src/main.c ****   MX_DMA_Init();
 110:Core/Src/main.c ****   MX_USART2_UART_Init();
 111:Core/Src/main.c ****   MX_ADC1_Init();
 112:Core/Src/main.c ****   MX_TIM2_Init();
 113:Core/Src/main.c ****   MX_TIM3_Init();
 114:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 115:Core/Src/main.c ****   
 116:Core/Src/main.c ****   /* USER CODE END 2 */
 117:Core/Src/main.c **** 
 118:Core/Src/main.c ****   /* Infinite loop */
 119:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 120:Core/Src/main.c ****   while (1)
 121:Core/Src/main.c ****   {
 122:Core/Src/main.c ****     fsm_run(&fsm);
 123:Core/Src/main.c ****     /* USER CODE END WHILE */
 124:Core/Src/main.c **** 
 125:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 126:Core/Src/main.c **** 
 127:Core/Src/main.c ****   }
 128:Core/Src/main.c ****   /* USER CODE END 3 */
 129:Core/Src/main.c **** }
 130:Core/Src/main.c **** 
 131:Core/Src/main.c **** /**
 132:Core/Src/main.c ****   * @brief System Clock Configuration
 133:Core/Src/main.c ****   * @retval None
 134:Core/Src/main.c ****   */
 135:Core/Src/main.c **** void SystemClock_Config(void)
 136:Core/Src/main.c **** {
 137:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 138:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 141:Core/Src/main.c ****   */
 142:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 143:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 144:Core/Src/main.c **** 
 145:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 4


 146:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 147:Core/Src/main.c ****   */
 148:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 149:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 150:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 151:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 157:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 158:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 159:Core/Src/main.c ****   {
 160:Core/Src/main.c ****     Error_Handler();
 161:Core/Src/main.c ****   }
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 164:Core/Src/main.c ****   */
 165:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 166:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 167:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 168:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 169:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 170:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 171:Core/Src/main.c **** 
 172:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 173:Core/Src/main.c ****   {
 174:Core/Src/main.c ****     Error_Handler();
 175:Core/Src/main.c ****   }
 176:Core/Src/main.c **** }
 177:Core/Src/main.c **** 
 178:Core/Src/main.c **** /**
 179:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 180:Core/Src/main.c ****   * @param None
 181:Core/Src/main.c ****   * @retval None
 182:Core/Src/main.c ****   */
 183:Core/Src/main.c **** static void MX_ADC1_Init(void)
 184:Core/Src/main.c **** {
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 187:Core/Src/main.c **** 
 188:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 189:Core/Src/main.c **** 
 190:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 195:Core/Src/main.c **** 
 196:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 197:Core/Src/main.c ****   */
 198:Core/Src/main.c ****   hadc1.Instance = ADC1;
 199:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 200:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 201:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 202:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 5


 203:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 204:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 205:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 206:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 207:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 208:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 209:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 210:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 211:Core/Src/main.c ****   {
 212:Core/Src/main.c ****     Error_Handler();
 213:Core/Src/main.c ****   }
 214:Core/Src/main.c **** 
 215:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 216:Core/Src/main.c ****   */
 217:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 218:Core/Src/main.c ****   sConfig.Rank = 1;
 219:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 220:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 221:Core/Src/main.c ****   {
 222:Core/Src/main.c ****     Error_Handler();
 223:Core/Src/main.c ****   }
 224:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 225:Core/Src/main.c **** 
 226:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 227:Core/Src/main.c **** 
 228:Core/Src/main.c **** }
 229:Core/Src/main.c **** 
 230:Core/Src/main.c **** /**
 231:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 232:Core/Src/main.c ****   * @param None
 233:Core/Src/main.c ****   * @retval None
 234:Core/Src/main.c ****   */
 235:Core/Src/main.c **** static void MX_TIM2_Init(void)
 236:Core/Src/main.c **** {
 237:Core/Src/main.c **** 
 238:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 239:Core/Src/main.c **** 
 240:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 243:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 244:Core/Src/main.c **** 
 245:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 248:Core/Src/main.c ****   htim2.Instance = TIM2;
 249:Core/Src/main.c ****   htim2.Init.Prescaler = 1343;
 250:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 251:Core/Src/main.c ****   htim2.Init.Period = 62499;
 252:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 253:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 254:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 255:Core/Src/main.c ****   {
 256:Core/Src/main.c ****     Error_Handler();
 257:Core/Src/main.c ****   }
 258:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 259:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 6


 260:Core/Src/main.c ****   {
 261:Core/Src/main.c ****     Error_Handler();
 262:Core/Src/main.c ****   }
 263:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 264:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 265:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 266:Core/Src/main.c ****   {
 267:Core/Src/main.c ****     Error_Handler();
 268:Core/Src/main.c ****   }
 269:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 272:Core/Src/main.c **** 
 273:Core/Src/main.c **** }
 274:Core/Src/main.c **** 
 275:Core/Src/main.c **** /**
 276:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 277:Core/Src/main.c ****   * @param None
 278:Core/Src/main.c ****   * @retval None
 279:Core/Src/main.c ****   */
 280:Core/Src/main.c **** static void MX_TIM3_Init(void)
 281:Core/Src/main.c **** {
 282:Core/Src/main.c **** 
 283:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 288:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 289:Core/Src/main.c **** 
 290:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 291:Core/Src/main.c **** 
 292:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 293:Core/Src/main.c ****   htim3.Instance = TIM3;
 294:Core/Src/main.c ****   htim3.Init.Prescaler = 83;
 295:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 296:Core/Src/main.c ****   htim3.Init.Period = 49999;
 297:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 298:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 299:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 300:Core/Src/main.c ****   {
 301:Core/Src/main.c ****     Error_Handler();
 302:Core/Src/main.c ****   }
 303:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 304:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 305:Core/Src/main.c ****   {
 306:Core/Src/main.c ****     Error_Handler();
 307:Core/Src/main.c ****   }
 308:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 309:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 310:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 311:Core/Src/main.c ****   {
 312:Core/Src/main.c ****     Error_Handler();
 313:Core/Src/main.c ****   }
 314:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 7


 317:Core/Src/main.c **** 
 318:Core/Src/main.c **** }
 319:Core/Src/main.c **** 
 320:Core/Src/main.c **** /**
 321:Core/Src/main.c ****   * @brief USART2 Initialization Function
 322:Core/Src/main.c ****   * @param None
 323:Core/Src/main.c ****   * @retval None
 324:Core/Src/main.c ****   */
 325:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 326:Core/Src/main.c **** {
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 329:Core/Src/main.c **** 
 330:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 333:Core/Src/main.c **** 
 334:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 335:Core/Src/main.c ****   huart2.Instance = USART2;
 336:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 337:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 338:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 339:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 340:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 341:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 342:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 343:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 344:Core/Src/main.c ****   {
 345:Core/Src/main.c ****     Error_Handler();
 346:Core/Src/main.c ****   }
 347:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 348:Core/Src/main.c **** 
 349:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 350:Core/Src/main.c **** 
 351:Core/Src/main.c **** }
 352:Core/Src/main.c **** 
 353:Core/Src/main.c **** /**
 354:Core/Src/main.c ****   * Enable DMA controller clock
 355:Core/Src/main.c ****   */
 356:Core/Src/main.c **** static void MX_DMA_Init(void)
 357:Core/Src/main.c **** {
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /* DMA controller clock enable */
 360:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 361:Core/Src/main.c **** 
 362:Core/Src/main.c ****   /* DMA interrupt init */
 363:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 364:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 365:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 366:Core/Src/main.c **** 
 367:Core/Src/main.c **** }
 368:Core/Src/main.c **** 
 369:Core/Src/main.c **** /**
 370:Core/Src/main.c ****   * @brief GPIO Initialization Function
 371:Core/Src/main.c ****   * @param None
 372:Core/Src/main.c ****   * @retval None
 373:Core/Src/main.c ****   */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 8


 374:Core/Src/main.c **** static void MX_GPIO_Init(void)
 375:Core/Src/main.c **** {
  28              		.loc 1 375 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 70B5     		push	{r4, r5, r6, lr}
  33              		.cfi_def_cfa_offset 16
  34              		.cfi_offset 4, -16
  35              		.cfi_offset 5, -12
  36              		.cfi_offset 6, -8
  37              		.cfi_offset 14, -4
  38 0002 8AB0     		sub	sp, sp, #40
  39              		.cfi_def_cfa_offset 56
 376:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 376 3 view .LVU1
  41              		.loc 1 376 20 is_stmt 0 view .LVU2
  42 0004 0024     		movs	r4, #0
  43 0006 0594     		str	r4, [sp, #20]
  44 0008 0694     		str	r4, [sp, #24]
  45 000a 0794     		str	r4, [sp, #28]
  46 000c 0894     		str	r4, [sp, #32]
  47 000e 0994     		str	r4, [sp, #36]
 377:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 378:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 379:Core/Src/main.c **** 
 380:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 381:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  48              		.loc 1 381 3 is_stmt 1 view .LVU3
  49              	.LBB4:
  50              		.loc 1 381 3 view .LVU4
  51 0010 0194     		str	r4, [sp, #4]
  52              		.loc 1 381 3 view .LVU5
  53 0012 2F4B     		ldr	r3, .L3
  54 0014 1A6B     		ldr	r2, [r3, #48]
  55 0016 42F00402 		orr	r2, r2, #4
  56 001a 1A63     		str	r2, [r3, #48]
  57              		.loc 1 381 3 view .LVU6
  58 001c 1A6B     		ldr	r2, [r3, #48]
  59 001e 02F00402 		and	r2, r2, #4
  60 0022 0192     		str	r2, [sp, #4]
  61              		.loc 1 381 3 view .LVU7
  62 0024 019A     		ldr	r2, [sp, #4]
  63              	.LBE4:
  64              		.loc 1 381 3 view .LVU8
 382:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  65              		.loc 1 382 3 view .LVU9
  66              	.LBB5:
  67              		.loc 1 382 3 view .LVU10
  68 0026 0294     		str	r4, [sp, #8]
  69              		.loc 1 382 3 view .LVU11
  70 0028 1A6B     		ldr	r2, [r3, #48]
  71 002a 42F08002 		orr	r2, r2, #128
  72 002e 1A63     		str	r2, [r3, #48]
  73              		.loc 1 382 3 view .LVU12
  74 0030 1A6B     		ldr	r2, [r3, #48]
  75 0032 02F08002 		and	r2, r2, #128
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 9


  76 0036 0292     		str	r2, [sp, #8]
  77              		.loc 1 382 3 view .LVU13
  78 0038 029A     		ldr	r2, [sp, #8]
  79              	.LBE5:
  80              		.loc 1 382 3 view .LVU14
 383:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  81              		.loc 1 383 3 view .LVU15
  82              	.LBB6:
  83              		.loc 1 383 3 view .LVU16
  84 003a 0394     		str	r4, [sp, #12]
  85              		.loc 1 383 3 view .LVU17
  86 003c 1A6B     		ldr	r2, [r3, #48]
  87 003e 42F00102 		orr	r2, r2, #1
  88 0042 1A63     		str	r2, [r3, #48]
  89              		.loc 1 383 3 view .LVU18
  90 0044 1A6B     		ldr	r2, [r3, #48]
  91 0046 02F00102 		and	r2, r2, #1
  92 004a 0392     		str	r2, [sp, #12]
  93              		.loc 1 383 3 view .LVU19
  94 004c 039A     		ldr	r2, [sp, #12]
  95              	.LBE6:
  96              		.loc 1 383 3 view .LVU20
 384:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  97              		.loc 1 384 3 view .LVU21
  98              	.LBB7:
  99              		.loc 1 384 3 view .LVU22
 100 004e 0494     		str	r4, [sp, #16]
 101              		.loc 1 384 3 view .LVU23
 102 0050 1A6B     		ldr	r2, [r3, #48]
 103 0052 42F00202 		orr	r2, r2, #2
 104 0056 1A63     		str	r2, [r3, #48]
 105              		.loc 1 384 3 view .LVU24
 106 0058 1B6B     		ldr	r3, [r3, #48]
 107 005a 03F00203 		and	r3, r3, #2
 108 005e 0493     		str	r3, [sp, #16]
 109              		.loc 1 384 3 view .LVU25
 110 0060 049B     		ldr	r3, [sp, #16]
 111              	.LBE7:
 112              		.loc 1 384 3 view .LVU26
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 387:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 113              		.loc 1 387 3 view .LVU27
 114 0062 1C4D     		ldr	r5, .L3+4
 115 0064 2246     		mov	r2, r4
 116 0066 2021     		movs	r1, #32
 117 0068 2846     		mov	r0, r5
 118 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 119              	.LVL0:
 388:Core/Src/main.c **** 
 389:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 390:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 120              		.loc 1 390 3 view .LVU28
 121              		.loc 1 390 23 is_stmt 0 view .LVU29
 122 006e 4FF40053 		mov	r3, #8192
 123 0072 0593     		str	r3, [sp, #20]
 391:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 10


 124              		.loc 1 391 3 is_stmt 1 view .LVU30
 125              		.loc 1 391 24 is_stmt 0 view .LVU31
 126 0074 4FF48813 		mov	r3, #1114112
 127 0078 0693     		str	r3, [sp, #24]
 392:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 128              		.loc 1 392 3 is_stmt 1 view .LVU32
 129              		.loc 1 392 24 is_stmt 0 view .LVU33
 130 007a 0794     		str	r4, [sp, #28]
 393:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 393 3 is_stmt 1 view .LVU34
 132 007c 05A9     		add	r1, sp, #20
 133 007e 1648     		ldr	r0, .L3+8
 134 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL1:
 394:Core/Src/main.c **** 
 395:Core/Src/main.c ****   /*Configure GPIO pin : PA0 */
 396:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 136              		.loc 1 396 3 view .LVU35
 137              		.loc 1 396 23 is_stmt 0 view .LVU36
 138 0084 0126     		movs	r6, #1
 139 0086 0596     		str	r6, [sp, #20]
 397:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 140              		.loc 1 397 3 is_stmt 1 view .LVU37
 141              		.loc 1 397 24 is_stmt 0 view .LVU38
 142 0088 4FF44413 		mov	r3, #3211264
 143 008c 0693     		str	r3, [sp, #24]
 398:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 144              		.loc 1 398 3 is_stmt 1 view .LVU39
 145              		.loc 1 398 24 is_stmt 0 view .LVU40
 146 008e 0794     		str	r4, [sp, #28]
 399:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 147              		.loc 1 399 3 is_stmt 1 view .LVU41
 148 0090 05A9     		add	r1, sp, #20
 149 0092 2846     		mov	r0, r5
 150 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 151              	.LVL2:
 400:Core/Src/main.c **** 
 401:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 402:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 152              		.loc 1 402 3 view .LVU42
 153              		.loc 1 402 23 is_stmt 0 view .LVU43
 154 0098 2023     		movs	r3, #32
 155 009a 0593     		str	r3, [sp, #20]
 403:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 156              		.loc 1 403 3 is_stmt 1 view .LVU44
 157              		.loc 1 403 24 is_stmt 0 view .LVU45
 158 009c 0696     		str	r6, [sp, #24]
 404:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 159              		.loc 1 404 3 is_stmt 1 view .LVU46
 160              		.loc 1 404 24 is_stmt 0 view .LVU47
 161 009e 0794     		str	r4, [sp, #28]
 405:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 162              		.loc 1 405 3 is_stmt 1 view .LVU48
 163              		.loc 1 405 25 is_stmt 0 view .LVU49
 164 00a0 0894     		str	r4, [sp, #32]
 406:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 165              		.loc 1 406 3 is_stmt 1 view .LVU50
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 11


 166 00a2 05A9     		add	r1, sp, #20
 167 00a4 2846     		mov	r0, r5
 168 00a6 FFF7FEFF 		bl	HAL_GPIO_Init
 169              	.LVL3:
 407:Core/Src/main.c **** 
 408:Core/Src/main.c ****   /* EXTI interrupt init*/
 409:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 170              		.loc 1 409 3 view .LVU51
 171 00aa 2246     		mov	r2, r4
 172 00ac 2146     		mov	r1, r4
 173 00ae 0620     		movs	r0, #6
 174 00b0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 175              	.LVL4:
 410:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 176              		.loc 1 410 3 view .LVU52
 177 00b4 0620     		movs	r0, #6
 178 00b6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 179              	.LVL5:
 411:Core/Src/main.c **** 
 412:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 180              		.loc 1 412 3 view .LVU53
 181 00ba 2246     		mov	r2, r4
 182 00bc 2146     		mov	r1, r4
 183 00be 2820     		movs	r0, #40
 184 00c0 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 185              	.LVL6:
 413:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 186              		.loc 1 413 3 view .LVU54
 187 00c4 2820     		movs	r0, #40
 188 00c6 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 189              	.LVL7:
 414:Core/Src/main.c **** 
 415:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 416:Core/Src/main.c **** 
 417:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 418:Core/Src/main.c **** }
 190              		.loc 1 418 1 is_stmt 0 view .LVU55
 191 00ca 0AB0     		add	sp, sp, #40
 192              		.cfi_def_cfa_offset 16
 193              		@ sp needed
 194 00cc 70BD     		pop	{r4, r5, r6, pc}
 195              	.L4:
 196 00ce 00BF     		.align	2
 197              	.L3:
 198 00d0 00380240 		.word	1073887232
 199 00d4 00000240 		.word	1073872896
 200 00d8 00080240 		.word	1073874944
 201              		.cfi_endproc
 202              	.LFE250:
 204              		.section	.text.MX_DMA_Init,"ax",%progbits
 205              		.align	1
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	MX_DMA_Init:
 211              	.LFB249:
 357:Core/Src/main.c **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 12


 212              		.loc 1 357 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 8
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 00B5     		push	{lr}
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 14, -4
 219 0002 83B0     		sub	sp, sp, #12
 220              		.cfi_def_cfa_offset 16
 360:Core/Src/main.c **** 
 221              		.loc 1 360 3 view .LVU57
 222              	.LBB8:
 360:Core/Src/main.c **** 
 223              		.loc 1 360 3 view .LVU58
 224 0004 0021     		movs	r1, #0
 225 0006 0191     		str	r1, [sp, #4]
 360:Core/Src/main.c **** 
 226              		.loc 1 360 3 view .LVU59
 227 0008 094B     		ldr	r3, .L7
 228 000a 1A6B     		ldr	r2, [r3, #48]
 229 000c 42F48002 		orr	r2, r2, #4194304
 230 0010 1A63     		str	r2, [r3, #48]
 360:Core/Src/main.c **** 
 231              		.loc 1 360 3 view .LVU60
 232 0012 1B6B     		ldr	r3, [r3, #48]
 233 0014 03F48003 		and	r3, r3, #4194304
 234 0018 0193     		str	r3, [sp, #4]
 360:Core/Src/main.c **** 
 235              		.loc 1 360 3 view .LVU61
 236 001a 019B     		ldr	r3, [sp, #4]
 237              	.LBE8:
 360:Core/Src/main.c **** 
 238              		.loc 1 360 3 view .LVU62
 364:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 239              		.loc 1 364 3 view .LVU63
 240 001c 0A46     		mov	r2, r1
 241 001e 3820     		movs	r0, #56
 242 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 243              	.LVL8:
 365:Core/Src/main.c **** 
 244              		.loc 1 365 3 view .LVU64
 245 0024 3820     		movs	r0, #56
 246 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 247              	.LVL9:
 367:Core/Src/main.c **** 
 248              		.loc 1 367 1 is_stmt 0 view .LVU65
 249 002a 03B0     		add	sp, sp, #12
 250              		.cfi_def_cfa_offset 4
 251              		@ sp needed
 252 002c 5DF804FB 		ldr	pc, [sp], #4
 253              	.L8:
 254              		.align	2
 255              	.L7:
 256 0030 00380240 		.word	1073887232
 257              		.cfi_endproc
 258              	.LFE249:
 260              		.section	.text.send_to_serial,"ax",%progbits
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 13


 261              		.align	1
 262              		.global	send_to_serial
 263              		.syntax unified
 264              		.thumb
 265              		.thumb_func
 267              	send_to_serial:
 268              	.LVL10:
 269              	.LFB242:
  73:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 270              		.loc 1 73 32 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
  73:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 274              		.loc 1 73 32 is_stmt 0 view .LVU67
 275 0000 10B5     		push	{r4, lr}
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 4, -8
 278              		.cfi_offset 14, -4
 279 0002 0446     		mov	r4, r0
  74:Core/Src/main.c **** }
 280              		.loc 1 74 3 is_stmt 1 view .LVU68
  74:Core/Src/main.c **** }
 281              		.loc 1 74 45 is_stmt 0 view .LVU69
 282 0004 FFF7FEFF 		bl	strlen
 283              	.LVL11:
  74:Core/Src/main.c **** }
 284              		.loc 1 74 3 discriminator 1 view .LVU70
 285 0008 4FF0FF33 		mov	r3, #-1
 286 000c 82B2     		uxth	r2, r0
 287 000e 2146     		mov	r1, r4
 288 0010 0148     		ldr	r0, .L11
 289 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 290              	.LVL12:
  75:Core/Src/main.c **** 
 291              		.loc 1 75 1 view .LVU71
 292 0016 10BD     		pop	{r4, pc}
 293              	.LVL13:
 294              	.L12:
  75:Core/Src/main.c **** 
 295              		.loc 1 75 1 view .LVU72
 296              		.align	2
 297              	.L11:
 298 0018 00000000 		.word	huart2
 299              		.cfi_endproc
 300              	.LFE242:
 302              		.section	.text.Error_Handler,"ax",%progbits
 303              		.align	1
 304              		.global	Error_Handler
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 309              	Error_Handler:
 310              	.LFB251:
 419:Core/Src/main.c **** 
 420:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 421:Core/Src/main.c **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 14


 422:Core/Src/main.c **** /* USER CODE END 4 */
 423:Core/Src/main.c **** 
 424:Core/Src/main.c **** /**
 425:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 426:Core/Src/main.c ****   * @retval None
 427:Core/Src/main.c ****   */
 428:Core/Src/main.c **** void Error_Handler(void)
 429:Core/Src/main.c **** {
 311              		.loc 1 429 1 is_stmt 1 view -0
 312              		.cfi_startproc
 313              		@ Volatile: function does not return.
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316 0000 08B5     		push	{r3, lr}
 317              		.cfi_def_cfa_offset 8
 318              		.cfi_offset 3, -8
 319              		.cfi_offset 14, -4
 430:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 431:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 432:Core/Src/main.c ****   change_state(&fsm, FSMERROR);
 320              		.loc 1 432 3 view .LVU74
 321 0002 0521     		movs	r1, #5
 322 0004 0348     		ldr	r0, .L16
 323 0006 FFF7FEFF 		bl	change_state
 324              	.LVL14:
 433:Core/Src/main.c **** 
 434:Core/Src/main.c ****   __disable_irq();
 325              		.loc 1 434 3 view .LVU75
 326              	.LBB9:
 327              	.LBI9:
 328              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 15


  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 16


  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 17


 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 18


 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 19


 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 20


 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 21


 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 22


 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 23


 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 24


 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 25


 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 26


 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 27


 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 28


 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 29


 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 30


 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 31


 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 329              		.loc 2 960 27 view .LVU76
 330              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 331              		.loc 2 962 3 view .LVU77
 332              		.syntax unified
 333              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 334 000a 72B6     		cpsid i
 335              	@ 0 "" 2
 336              		.thumb
 337              		.syntax unified
 338              	.L14:
 339              	.LBE10:
 340              	.LBE9:
 435:Core/Src/main.c ****   while (1)
 341              		.loc 1 435 3 view .LVU78
 436:Core/Src/main.c ****   {
 437:Core/Src/main.c ****     fsm_run(&fsm);
 342              		.loc 1 437 5 discriminator 1 view .LVU79
 343 000c 0148     		ldr	r0, .L16
 344 000e FFF7FEFF 		bl	fsm_run
 345              	.LVL15:
 435:Core/Src/main.c ****   while (1)
 346              		.loc 1 435 9 view .LVU80
 347 0012 FBE7     		b	.L14
 348              	.L17:
 349              		.align	2
 350              	.L16:
 351 0014 00000000 		.word	fsm
 352              		.cfi_endproc
 353              	.LFE251:
 355              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 356              		.align	1
 357              		.syntax unified
 358              		.thumb
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 32


 359              		.thumb_func
 361              	MX_USART2_UART_Init:
 362              	.LFB248:
 326:Core/Src/main.c **** 
 363              		.loc 1 326 1 view -0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 0
 366              		@ frame_needed = 0, uses_anonymous_args = 0
 367 0000 08B5     		push	{r3, lr}
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 3, -8
 370              		.cfi_offset 14, -4
 335:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 371              		.loc 1 335 3 view .LVU82
 335:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 372              		.loc 1 335 19 is_stmt 0 view .LVU83
 373 0002 0A48     		ldr	r0, .L22
 374 0004 0A4B     		ldr	r3, .L22+4
 375 0006 0360     		str	r3, [r0]
 336:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 376              		.loc 1 336 3 is_stmt 1 view .LVU84
 336:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 377              		.loc 1 336 24 is_stmt 0 view .LVU85
 378 0008 4FF4E133 		mov	r3, #115200
 379 000c 4360     		str	r3, [r0, #4]
 337:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 380              		.loc 1 337 3 is_stmt 1 view .LVU86
 337:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 381              		.loc 1 337 26 is_stmt 0 view .LVU87
 382 000e 0023     		movs	r3, #0
 383 0010 8360     		str	r3, [r0, #8]
 338:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 384              		.loc 1 338 3 is_stmt 1 view .LVU88
 338:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 385              		.loc 1 338 24 is_stmt 0 view .LVU89
 386 0012 C360     		str	r3, [r0, #12]
 339:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 387              		.loc 1 339 3 is_stmt 1 view .LVU90
 339:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 388              		.loc 1 339 22 is_stmt 0 view .LVU91
 389 0014 0361     		str	r3, [r0, #16]
 340:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 390              		.loc 1 340 3 is_stmt 1 view .LVU92
 340:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 391              		.loc 1 340 20 is_stmt 0 view .LVU93
 392 0016 0C22     		movs	r2, #12
 393 0018 4261     		str	r2, [r0, #20]
 341:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 394              		.loc 1 341 3 is_stmt 1 view .LVU94
 341:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 395              		.loc 1 341 25 is_stmt 0 view .LVU95
 396 001a 8361     		str	r3, [r0, #24]
 342:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 397              		.loc 1 342 3 is_stmt 1 view .LVU96
 342:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 398              		.loc 1 342 28 is_stmt 0 view .LVU97
 399 001c C361     		str	r3, [r0, #28]
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 33


 343:Core/Src/main.c ****   {
 400              		.loc 1 343 3 is_stmt 1 view .LVU98
 343:Core/Src/main.c ****   {
 401              		.loc 1 343 7 is_stmt 0 view .LVU99
 402 001e FFF7FEFF 		bl	HAL_UART_Init
 403              	.LVL16:
 343:Core/Src/main.c ****   {
 404              		.loc 1 343 6 discriminator 1 view .LVU100
 405 0022 00B9     		cbnz	r0, .L21
 351:Core/Src/main.c **** 
 406              		.loc 1 351 1 view .LVU101
 407 0024 08BD     		pop	{r3, pc}
 408              	.L21:
 345:Core/Src/main.c ****   }
 409              		.loc 1 345 5 is_stmt 1 view .LVU102
 410 0026 FFF7FEFF 		bl	Error_Handler
 411              	.LVL17:
 412              	.L23:
 413 002a 00BF     		.align	2
 414              	.L22:
 415 002c 00000000 		.word	huart2
 416 0030 00440040 		.word	1073759232
 417              		.cfi_endproc
 418              	.LFE248:
 420              		.section	.text.MX_ADC1_Init,"ax",%progbits
 421              		.align	1
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 426              	MX_ADC1_Init:
 427              	.LFB245:
 184:Core/Src/main.c **** 
 428              		.loc 1 184 1 view -0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 16
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432 0000 00B5     		push	{lr}
 433              		.cfi_def_cfa_offset 4
 434              		.cfi_offset 14, -4
 435 0002 85B0     		sub	sp, sp, #20
 436              		.cfi_def_cfa_offset 24
 190:Core/Src/main.c **** 
 437              		.loc 1 190 3 view .LVU104
 190:Core/Src/main.c **** 
 438              		.loc 1 190 26 is_stmt 0 view .LVU105
 439 0004 0023     		movs	r3, #0
 440 0006 0093     		str	r3, [sp]
 441 0008 0193     		str	r3, [sp, #4]
 442 000a 0293     		str	r3, [sp, #8]
 443 000c 0393     		str	r3, [sp, #12]
 198:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 444              		.loc 1 198 3 is_stmt 1 view .LVU106
 198:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 445              		.loc 1 198 18 is_stmt 0 view .LVU107
 446 000e 1448     		ldr	r0, .L30
 447 0010 144A     		ldr	r2, .L30+4
 448 0012 0260     		str	r2, [r0]
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 34


 199:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 449              		.loc 1 199 3 is_stmt 1 view .LVU108
 199:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 450              		.loc 1 199 29 is_stmt 0 view .LVU109
 451 0014 4FF48032 		mov	r2, #65536
 452 0018 4260     		str	r2, [r0, #4]
 200:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 453              		.loc 1 200 3 is_stmt 1 view .LVU110
 200:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 454              		.loc 1 200 25 is_stmt 0 view .LVU111
 455 001a 8360     		str	r3, [r0, #8]
 201:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 456              		.loc 1 201 3 is_stmt 1 view .LVU112
 201:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 457              		.loc 1 201 27 is_stmt 0 view .LVU113
 458 001c 0361     		str	r3, [r0, #16]
 202:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 459              		.loc 1 202 3 is_stmt 1 view .LVU114
 202:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 460              		.loc 1 202 33 is_stmt 0 view .LVU115
 461 001e 0376     		strb	r3, [r0, #24]
 203:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 462              		.loc 1 203 3 is_stmt 1 view .LVU116
 203:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 463              		.loc 1 203 36 is_stmt 0 view .LVU117
 464 0020 80F82030 		strb	r3, [r0, #32]
 204:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 465              		.loc 1 204 3 is_stmt 1 view .LVU118
 204:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 466              		.loc 1 204 35 is_stmt 0 view .LVU119
 467 0024 C362     		str	r3, [r0, #44]
 205:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 468              		.loc 1 205 3 is_stmt 1 view .LVU120
 205:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 469              		.loc 1 205 31 is_stmt 0 view .LVU121
 470 0026 104A     		ldr	r2, .L30+8
 471 0028 8262     		str	r2, [r0, #40]
 206:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 472              		.loc 1 206 3 is_stmt 1 view .LVU122
 206:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 473              		.loc 1 206 24 is_stmt 0 view .LVU123
 474 002a C360     		str	r3, [r0, #12]
 207:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 475              		.loc 1 207 3 is_stmt 1 view .LVU124
 207:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 476              		.loc 1 207 30 is_stmt 0 view .LVU125
 477 002c 0122     		movs	r2, #1
 478 002e C261     		str	r2, [r0, #28]
 208:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 479              		.loc 1 208 3 is_stmt 1 view .LVU126
 208:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 480              		.loc 1 208 36 is_stmt 0 view .LVU127
 481 0030 80F83030 		strb	r3, [r0, #48]
 209:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 482              		.loc 1 209 3 is_stmt 1 view .LVU128
 209:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 483              		.loc 1 209 27 is_stmt 0 view .LVU129
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 35


 484 0034 4261     		str	r2, [r0, #20]
 210:Core/Src/main.c ****   {
 485              		.loc 1 210 3 is_stmt 1 view .LVU130
 210:Core/Src/main.c ****   {
 486              		.loc 1 210 7 is_stmt 0 view .LVU131
 487 0036 FFF7FEFF 		bl	HAL_ADC_Init
 488              	.LVL18:
 210:Core/Src/main.c ****   {
 489              		.loc 1 210 6 discriminator 1 view .LVU132
 490 003a 60B9     		cbnz	r0, .L28
 217:Core/Src/main.c ****   sConfig.Rank = 1;
 491              		.loc 1 217 3 is_stmt 1 view .LVU133
 217:Core/Src/main.c ****   sConfig.Rank = 1;
 492              		.loc 1 217 19 is_stmt 0 view .LVU134
 493 003c 0123     		movs	r3, #1
 494 003e 0093     		str	r3, [sp]
 218:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 495              		.loc 1 218 3 is_stmt 1 view .LVU135
 218:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 496              		.loc 1 218 16 is_stmt 0 view .LVU136
 497 0040 0193     		str	r3, [sp, #4]
 219:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 498              		.loc 1 219 3 is_stmt 1 view .LVU137
 219:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 499              		.loc 1 219 24 is_stmt 0 view .LVU138
 500 0042 0023     		movs	r3, #0
 501 0044 0293     		str	r3, [sp, #8]
 220:Core/Src/main.c ****   {
 502              		.loc 1 220 3 is_stmt 1 view .LVU139
 220:Core/Src/main.c ****   {
 503              		.loc 1 220 7 is_stmt 0 view .LVU140
 504 0046 6946     		mov	r1, sp
 505 0048 0548     		ldr	r0, .L30
 506 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 507              	.LVL19:
 220:Core/Src/main.c ****   {
 508              		.loc 1 220 6 discriminator 1 view .LVU141
 509 004e 20B9     		cbnz	r0, .L29
 228:Core/Src/main.c **** 
 510              		.loc 1 228 1 view .LVU142
 511 0050 05B0     		add	sp, sp, #20
 512              		.cfi_remember_state
 513              		.cfi_def_cfa_offset 4
 514              		@ sp needed
 515 0052 5DF804FB 		ldr	pc, [sp], #4
 516              	.L28:
 517              		.cfi_restore_state
 212:Core/Src/main.c ****   }
 518              		.loc 1 212 5 is_stmt 1 view .LVU143
 519 0056 FFF7FEFF 		bl	Error_Handler
 520              	.LVL20:
 521              	.L29:
 222:Core/Src/main.c ****   }
 522              		.loc 1 222 5 view .LVU144
 523 005a FFF7FEFF 		bl	Error_Handler
 524              	.LVL21:
 525              	.L31:
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 36


 526 005e 00BF     		.align	2
 527              	.L30:
 528 0060 00000000 		.word	hadc1
 529 0064 00200140 		.word	1073815552
 530 0068 0100000F 		.word	251658241
 531              		.cfi_endproc
 532              	.LFE245:
 534              		.section	.text.MX_TIM2_Init,"ax",%progbits
 535              		.align	1
 536              		.syntax unified
 537              		.thumb
 538              		.thumb_func
 540              	MX_TIM2_Init:
 541              	.LFB246:
 236:Core/Src/main.c **** 
 542              		.loc 1 236 1 view -0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 24
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 546 0000 00B5     		push	{lr}
 547              		.cfi_def_cfa_offset 4
 548              		.cfi_offset 14, -4
 549 0002 87B0     		sub	sp, sp, #28
 550              		.cfi_def_cfa_offset 32
 242:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 551              		.loc 1 242 3 view .LVU146
 242:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 552              		.loc 1 242 26 is_stmt 0 view .LVU147
 553 0004 0023     		movs	r3, #0
 554 0006 0293     		str	r3, [sp, #8]
 555 0008 0393     		str	r3, [sp, #12]
 556 000a 0493     		str	r3, [sp, #16]
 557 000c 0593     		str	r3, [sp, #20]
 243:Core/Src/main.c **** 
 558              		.loc 1 243 3 is_stmt 1 view .LVU148
 243:Core/Src/main.c **** 
 559              		.loc 1 243 27 is_stmt 0 view .LVU149
 560 000e 0093     		str	r3, [sp]
 561 0010 0193     		str	r3, [sp, #4]
 248:Core/Src/main.c ****   htim2.Init.Prescaler = 1343;
 562              		.loc 1 248 3 is_stmt 1 view .LVU150
 248:Core/Src/main.c ****   htim2.Init.Prescaler = 1343;
 563              		.loc 1 248 18 is_stmt 0 view .LVU151
 564 0012 1448     		ldr	r0, .L40
 565 0014 4FF08042 		mov	r2, #1073741824
 566 0018 0260     		str	r2, [r0]
 249:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 567              		.loc 1 249 3 is_stmt 1 view .LVU152
 249:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 568              		.loc 1 249 24 is_stmt 0 view .LVU153
 569 001a 40F23F52 		movw	r2, #1343
 570 001e 4260     		str	r2, [r0, #4]
 250:Core/Src/main.c ****   htim2.Init.Period = 62499;
 571              		.loc 1 250 3 is_stmt 1 view .LVU154
 250:Core/Src/main.c ****   htim2.Init.Period = 62499;
 572              		.loc 1 250 26 is_stmt 0 view .LVU155
 573 0020 8360     		str	r3, [r0, #8]
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 37


 251:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 574              		.loc 1 251 3 is_stmt 1 view .LVU156
 251:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 575              		.loc 1 251 21 is_stmt 0 view .LVU157
 576 0022 4FF22342 		movw	r2, #62499
 577 0026 C260     		str	r2, [r0, #12]
 252:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 578              		.loc 1 252 3 is_stmt 1 view .LVU158
 252:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 579              		.loc 1 252 28 is_stmt 0 view .LVU159
 580 0028 0361     		str	r3, [r0, #16]
 253:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 581              		.loc 1 253 3 is_stmt 1 view .LVU160
 253:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 582              		.loc 1 253 32 is_stmt 0 view .LVU161
 583 002a 8361     		str	r3, [r0, #24]
 254:Core/Src/main.c ****   {
 584              		.loc 1 254 3 is_stmt 1 view .LVU162
 254:Core/Src/main.c ****   {
 585              		.loc 1 254 7 is_stmt 0 view .LVU163
 586 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 587              	.LVL22:
 254:Core/Src/main.c ****   {
 588              		.loc 1 254 6 discriminator 1 view .LVU164
 589 0030 90B9     		cbnz	r0, .L37
 258:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 590              		.loc 1 258 3 is_stmt 1 view .LVU165
 258:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 591              		.loc 1 258 34 is_stmt 0 view .LVU166
 592 0032 4FF48053 		mov	r3, #4096
 593 0036 0293     		str	r3, [sp, #8]
 259:Core/Src/main.c ****   {
 594              		.loc 1 259 3 is_stmt 1 view .LVU167
 259:Core/Src/main.c ****   {
 595              		.loc 1 259 7 is_stmt 0 view .LVU168
 596 0038 02A9     		add	r1, sp, #8
 597 003a 0A48     		ldr	r0, .L40
 598 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 599              	.LVL23:
 259:Core/Src/main.c ****   {
 600              		.loc 1 259 6 discriminator 1 view .LVU169
 601 0040 60B9     		cbnz	r0, .L38
 263:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 602              		.loc 1 263 3 is_stmt 1 view .LVU170
 263:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 603              		.loc 1 263 37 is_stmt 0 view .LVU171
 604 0042 0023     		movs	r3, #0
 605 0044 0093     		str	r3, [sp]
 264:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 606              		.loc 1 264 3 is_stmt 1 view .LVU172
 264:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 607              		.loc 1 264 33 is_stmt 0 view .LVU173
 608 0046 0193     		str	r3, [sp, #4]
 265:Core/Src/main.c ****   {
 609              		.loc 1 265 3 is_stmt 1 view .LVU174
 265:Core/Src/main.c ****   {
 610              		.loc 1 265 7 is_stmt 0 view .LVU175
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 38


 611 0048 6946     		mov	r1, sp
 612 004a 0648     		ldr	r0, .L40
 613 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 614              	.LVL24:
 265:Core/Src/main.c ****   {
 615              		.loc 1 265 6 discriminator 1 view .LVU176
 616 0050 30B9     		cbnz	r0, .L39
 273:Core/Src/main.c **** 
 617              		.loc 1 273 1 view .LVU177
 618 0052 07B0     		add	sp, sp, #28
 619              		.cfi_remember_state
 620              		.cfi_def_cfa_offset 4
 621              		@ sp needed
 622 0054 5DF804FB 		ldr	pc, [sp], #4
 623              	.L37:
 624              		.cfi_restore_state
 256:Core/Src/main.c ****   }
 625              		.loc 1 256 5 is_stmt 1 view .LVU178
 626 0058 FFF7FEFF 		bl	Error_Handler
 627              	.LVL25:
 628              	.L38:
 261:Core/Src/main.c ****   }
 629              		.loc 1 261 5 view .LVU179
 630 005c FFF7FEFF 		bl	Error_Handler
 631              	.LVL26:
 632              	.L39:
 267:Core/Src/main.c ****   }
 633              		.loc 1 267 5 view .LVU180
 634 0060 FFF7FEFF 		bl	Error_Handler
 635              	.LVL27:
 636              	.L41:
 637              		.align	2
 638              	.L40:
 639 0064 00000000 		.word	htim2
 640              		.cfi_endproc
 641              	.LFE246:
 643              		.section	.text.MX_TIM3_Init,"ax",%progbits
 644              		.align	1
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 649              	MX_TIM3_Init:
 650              	.LFB247:
 281:Core/Src/main.c **** 
 651              		.loc 1 281 1 view -0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 24
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655 0000 00B5     		push	{lr}
 656              		.cfi_def_cfa_offset 4
 657              		.cfi_offset 14, -4
 658 0002 87B0     		sub	sp, sp, #28
 659              		.cfi_def_cfa_offset 32
 287:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 660              		.loc 1 287 3 view .LVU182
 287:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 661              		.loc 1 287 26 is_stmt 0 view .LVU183
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 39


 662 0004 0023     		movs	r3, #0
 663 0006 0293     		str	r3, [sp, #8]
 664 0008 0393     		str	r3, [sp, #12]
 665 000a 0493     		str	r3, [sp, #16]
 666 000c 0593     		str	r3, [sp, #20]
 288:Core/Src/main.c **** 
 667              		.loc 1 288 3 is_stmt 1 view .LVU184
 288:Core/Src/main.c **** 
 668              		.loc 1 288 27 is_stmt 0 view .LVU185
 669 000e 0093     		str	r3, [sp]
 670 0010 0193     		str	r3, [sp, #4]
 293:Core/Src/main.c ****   htim3.Init.Prescaler = 83;
 671              		.loc 1 293 3 is_stmt 1 view .LVU186
 293:Core/Src/main.c ****   htim3.Init.Prescaler = 83;
 672              		.loc 1 293 18 is_stmt 0 view .LVU187
 673 0012 1348     		ldr	r0, .L50
 674 0014 134A     		ldr	r2, .L50+4
 675 0016 0260     		str	r2, [r0]
 294:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 676              		.loc 1 294 3 is_stmt 1 view .LVU188
 294:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 677              		.loc 1 294 24 is_stmt 0 view .LVU189
 678 0018 5322     		movs	r2, #83
 679 001a 4260     		str	r2, [r0, #4]
 295:Core/Src/main.c ****   htim3.Init.Period = 49999;
 680              		.loc 1 295 3 is_stmt 1 view .LVU190
 295:Core/Src/main.c ****   htim3.Init.Period = 49999;
 681              		.loc 1 295 26 is_stmt 0 view .LVU191
 682 001c 8360     		str	r3, [r0, #8]
 296:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 683              		.loc 1 296 3 is_stmt 1 view .LVU192
 296:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 684              		.loc 1 296 21 is_stmt 0 view .LVU193
 685 001e 4CF24F32 		movw	r2, #49999
 686 0022 C260     		str	r2, [r0, #12]
 297:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 687              		.loc 1 297 3 is_stmt 1 view .LVU194
 297:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 688              		.loc 1 297 28 is_stmt 0 view .LVU195
 689 0024 0361     		str	r3, [r0, #16]
 298:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 690              		.loc 1 298 3 is_stmt 1 view .LVU196
 298:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 691              		.loc 1 298 32 is_stmt 0 view .LVU197
 692 0026 8361     		str	r3, [r0, #24]
 299:Core/Src/main.c ****   {
 693              		.loc 1 299 3 is_stmt 1 view .LVU198
 299:Core/Src/main.c ****   {
 694              		.loc 1 299 7 is_stmt 0 view .LVU199
 695 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 696              	.LVL28:
 299:Core/Src/main.c ****   {
 697              		.loc 1 299 6 discriminator 1 view .LVU200
 698 002c 90B9     		cbnz	r0, .L47
 303:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 699              		.loc 1 303 3 is_stmt 1 view .LVU201
 303:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 40


 700              		.loc 1 303 34 is_stmt 0 view .LVU202
 701 002e 4FF48053 		mov	r3, #4096
 702 0032 0293     		str	r3, [sp, #8]
 304:Core/Src/main.c ****   {
 703              		.loc 1 304 3 is_stmt 1 view .LVU203
 304:Core/Src/main.c ****   {
 704              		.loc 1 304 7 is_stmt 0 view .LVU204
 705 0034 02A9     		add	r1, sp, #8
 706 0036 0A48     		ldr	r0, .L50
 707 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 708              	.LVL29:
 304:Core/Src/main.c ****   {
 709              		.loc 1 304 6 discriminator 1 view .LVU205
 710 003c 60B9     		cbnz	r0, .L48
 308:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 711              		.loc 1 308 3 is_stmt 1 view .LVU206
 308:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 712              		.loc 1 308 37 is_stmt 0 view .LVU207
 713 003e 0023     		movs	r3, #0
 714 0040 0093     		str	r3, [sp]
 309:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 715              		.loc 1 309 3 is_stmt 1 view .LVU208
 309:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 716              		.loc 1 309 33 is_stmt 0 view .LVU209
 717 0042 0193     		str	r3, [sp, #4]
 310:Core/Src/main.c ****   {
 718              		.loc 1 310 3 is_stmt 1 view .LVU210
 310:Core/Src/main.c ****   {
 719              		.loc 1 310 7 is_stmt 0 view .LVU211
 720 0044 6946     		mov	r1, sp
 721 0046 0648     		ldr	r0, .L50
 722 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 723              	.LVL30:
 310:Core/Src/main.c ****   {
 724              		.loc 1 310 6 discriminator 1 view .LVU212
 725 004c 30B9     		cbnz	r0, .L49
 318:Core/Src/main.c **** 
 726              		.loc 1 318 1 view .LVU213
 727 004e 07B0     		add	sp, sp, #28
 728              		.cfi_remember_state
 729              		.cfi_def_cfa_offset 4
 730              		@ sp needed
 731 0050 5DF804FB 		ldr	pc, [sp], #4
 732              	.L47:
 733              		.cfi_restore_state
 301:Core/Src/main.c ****   }
 734              		.loc 1 301 5 is_stmt 1 view .LVU214
 735 0054 FFF7FEFF 		bl	Error_Handler
 736              	.LVL31:
 737              	.L48:
 306:Core/Src/main.c ****   }
 738              		.loc 1 306 5 view .LVU215
 739 0058 FFF7FEFF 		bl	Error_Handler
 740              	.LVL32:
 741              	.L49:
 312:Core/Src/main.c ****   }
 742              		.loc 1 312 5 view .LVU216
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 41


 743 005c FFF7FEFF 		bl	Error_Handler
 744              	.LVL33:
 745              	.L51:
 746              		.align	2
 747              	.L50:
 748 0060 00000000 		.word	htim3
 749 0064 00040040 		.word	1073742848
 750              		.cfi_endproc
 751              	.LFE247:
 753              		.section	.text.SystemClock_Config,"ax",%progbits
 754              		.align	1
 755              		.global	SystemClock_Config
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 760              	SystemClock_Config:
 761              	.LFB244:
 136:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 762              		.loc 1 136 1 view -0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 80
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766 0000 00B5     		push	{lr}
 767              		.cfi_def_cfa_offset 4
 768              		.cfi_offset 14, -4
 769 0002 95B0     		sub	sp, sp, #84
 770              		.cfi_def_cfa_offset 88
 137:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 771              		.loc 1 137 3 view .LVU218
 137:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 772              		.loc 1 137 22 is_stmt 0 view .LVU219
 773 0004 3422     		movs	r2, #52
 774 0006 0021     		movs	r1, #0
 775 0008 07A8     		add	r0, sp, #28
 776 000a FFF7FEFF 		bl	memset
 777              	.LVL34:
 138:Core/Src/main.c **** 
 778              		.loc 1 138 3 is_stmt 1 view .LVU220
 138:Core/Src/main.c **** 
 779              		.loc 1 138 22 is_stmt 0 view .LVU221
 780 000e 0023     		movs	r3, #0
 781 0010 0293     		str	r3, [sp, #8]
 782 0012 0393     		str	r3, [sp, #12]
 783 0014 0493     		str	r3, [sp, #16]
 784 0016 0593     		str	r3, [sp, #20]
 785 0018 0693     		str	r3, [sp, #24]
 142:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 786              		.loc 1 142 3 is_stmt 1 view .LVU222
 787              	.LBB11:
 142:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 788              		.loc 1 142 3 view .LVU223
 789 001a 0093     		str	r3, [sp]
 142:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 790              		.loc 1 142 3 view .LVU224
 791 001c 1F4A     		ldr	r2, .L58
 792 001e 116C     		ldr	r1, [r2, #64]
 793 0020 41F08051 		orr	r1, r1, #268435456
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 42


 794 0024 1164     		str	r1, [r2, #64]
 142:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 795              		.loc 1 142 3 view .LVU225
 796 0026 126C     		ldr	r2, [r2, #64]
 797 0028 02F08052 		and	r2, r2, #268435456
 798 002c 0092     		str	r2, [sp]
 142:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 799              		.loc 1 142 3 view .LVU226
 800 002e 009A     		ldr	r2, [sp]
 801              	.LBE11:
 142:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 802              		.loc 1 142 3 view .LVU227
 143:Core/Src/main.c **** 
 803              		.loc 1 143 3 view .LVU228
 804              	.LBB12:
 143:Core/Src/main.c **** 
 805              		.loc 1 143 3 view .LVU229
 806 0030 0193     		str	r3, [sp, #4]
 143:Core/Src/main.c **** 
 807              		.loc 1 143 3 view .LVU230
 808 0032 1B49     		ldr	r1, .L58+4
 809 0034 0A68     		ldr	r2, [r1]
 810 0036 22F44042 		bic	r2, r2, #49152
 811 003a 42F48042 		orr	r2, r2, #16384
 812 003e 0A60     		str	r2, [r1]
 143:Core/Src/main.c **** 
 813              		.loc 1 143 3 view .LVU231
 814 0040 0A68     		ldr	r2, [r1]
 815 0042 02F44042 		and	r2, r2, #49152
 816 0046 0192     		str	r2, [sp, #4]
 143:Core/Src/main.c **** 
 817              		.loc 1 143 3 view .LVU232
 818 0048 019A     		ldr	r2, [sp, #4]
 819              	.LBE12:
 143:Core/Src/main.c **** 
 820              		.loc 1 143 3 view .LVU233
 148:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 821              		.loc 1 148 3 view .LVU234
 148:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 822              		.loc 1 148 36 is_stmt 0 view .LVU235
 823 004a 0222     		movs	r2, #2
 824 004c 0792     		str	r2, [sp, #28]
 149:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 825              		.loc 1 149 3 is_stmt 1 view .LVU236
 149:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 826              		.loc 1 149 30 is_stmt 0 view .LVU237
 827 004e 0121     		movs	r1, #1
 828 0050 0A91     		str	r1, [sp, #40]
 150:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 829              		.loc 1 150 3 is_stmt 1 view .LVU238
 150:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 830              		.loc 1 150 41 is_stmt 0 view .LVU239
 831 0052 1021     		movs	r1, #16
 832 0054 0B91     		str	r1, [sp, #44]
 151:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 833              		.loc 1 151 3 is_stmt 1 view .LVU240
 151:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 43


 834              		.loc 1 151 34 is_stmt 0 view .LVU241
 835 0056 0D92     		str	r2, [sp, #52]
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 836              		.loc 1 152 3 is_stmt 1 view .LVU242
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 837              		.loc 1 152 35 is_stmt 0 view .LVU243
 838 0058 0E93     		str	r3, [sp, #56]
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 839              		.loc 1 153 3 is_stmt 1 view .LVU244
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 840              		.loc 1 153 30 is_stmt 0 view .LVU245
 841 005a 0F91     		str	r1, [sp, #60]
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 842              		.loc 1 154 3 is_stmt 1 view .LVU246
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 843              		.loc 1 154 30 is_stmt 0 view .LVU247
 844 005c 4FF4A873 		mov	r3, #336
 845 0060 1093     		str	r3, [sp, #64]
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 846              		.loc 1 155 3 is_stmt 1 view .LVU248
 155:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 847              		.loc 1 155 30 is_stmt 0 view .LVU249
 848 0062 0423     		movs	r3, #4
 849 0064 1193     		str	r3, [sp, #68]
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 850              		.loc 1 156 3 is_stmt 1 view .LVU250
 156:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 851              		.loc 1 156 30 is_stmt 0 view .LVU251
 852 0066 1292     		str	r2, [sp, #72]
 157:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 853              		.loc 1 157 3 is_stmt 1 view .LVU252
 157:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 854              		.loc 1 157 30 is_stmt 0 view .LVU253
 855 0068 1392     		str	r2, [sp, #76]
 158:Core/Src/main.c ****   {
 856              		.loc 1 158 3 is_stmt 1 view .LVU254
 158:Core/Src/main.c ****   {
 857              		.loc 1 158 7 is_stmt 0 view .LVU255
 858 006a 07A8     		add	r0, sp, #28
 859 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 860              	.LVL35:
 158:Core/Src/main.c ****   {
 861              		.loc 1 158 6 discriminator 1 view .LVU256
 862 0070 80B9     		cbnz	r0, .L56
 165:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 863              		.loc 1 165 3 is_stmt 1 view .LVU257
 165:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 864              		.loc 1 165 31 is_stmt 0 view .LVU258
 865 0072 0F23     		movs	r3, #15
 866 0074 0293     		str	r3, [sp, #8]
 167:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 867              		.loc 1 167 3 is_stmt 1 view .LVU259
 167:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 868              		.loc 1 167 34 is_stmt 0 view .LVU260
 869 0076 0221     		movs	r1, #2
 870 0078 0391     		str	r1, [sp, #12]
 168:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 44


 871              		.loc 1 168 3 is_stmt 1 view .LVU261
 168:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 872              		.loc 1 168 35 is_stmt 0 view .LVU262
 873 007a 0023     		movs	r3, #0
 874 007c 0493     		str	r3, [sp, #16]
 169:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 875              		.loc 1 169 3 is_stmt 1 view .LVU263
 169:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 876              		.loc 1 169 36 is_stmt 0 view .LVU264
 877 007e 4FF48052 		mov	r2, #4096
 878 0082 0592     		str	r2, [sp, #20]
 170:Core/Src/main.c **** 
 879              		.loc 1 170 3 is_stmt 1 view .LVU265
 170:Core/Src/main.c **** 
 880              		.loc 1 170 36 is_stmt 0 view .LVU266
 881 0084 0693     		str	r3, [sp, #24]
 172:Core/Src/main.c ****   {
 882              		.loc 1 172 3 is_stmt 1 view .LVU267
 172:Core/Src/main.c ****   {
 883              		.loc 1 172 7 is_stmt 0 view .LVU268
 884 0086 02A8     		add	r0, sp, #8
 885 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 886              	.LVL36:
 172:Core/Src/main.c ****   {
 887              		.loc 1 172 6 discriminator 1 view .LVU269
 888 008c 20B9     		cbnz	r0, .L57
 176:Core/Src/main.c **** 
 889              		.loc 1 176 1 view .LVU270
 890 008e 15B0     		add	sp, sp, #84
 891              		.cfi_remember_state
 892              		.cfi_def_cfa_offset 4
 893              		@ sp needed
 894 0090 5DF804FB 		ldr	pc, [sp], #4
 895              	.L56:
 896              		.cfi_restore_state
 160:Core/Src/main.c ****   }
 897              		.loc 1 160 5 is_stmt 1 view .LVU271
 898 0094 FFF7FEFF 		bl	Error_Handler
 899              	.LVL37:
 900              	.L57:
 174:Core/Src/main.c ****   }
 901              		.loc 1 174 5 view .LVU272
 902 0098 FFF7FEFF 		bl	Error_Handler
 903              	.LVL38:
 904              	.L59:
 905              		.align	2
 906              	.L58:
 907 009c 00380240 		.word	1073887232
 908 00a0 00700040 		.word	1073770496
 909              		.cfi_endproc
 910              	.LFE244:
 912              		.section	.text.main,"ax",%progbits
 913              		.align	1
 914              		.global	main
 915              		.syntax unified
 916              		.thumb
 917              		.thumb_func
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 45


 919              	main:
 920              	.LFB243:
  84:Core/Src/main.c **** 
 921              		.loc 1 84 1 view -0
 922              		.cfi_startproc
 923              		@ Volatile: function does not return.
 924              		@ args = 0, pretend = 0, frame = 0
 925              		@ frame_needed = 0, uses_anonymous_args = 0
 926 0000 08B5     		push	{r3, lr}
 927              		.cfi_def_cfa_offset 8
 928              		.cfi_offset 3, -8
 929              		.cfi_offset 14, -4
  93:Core/Src/main.c **** 
 930              		.loc 1 93 3 view .LVU274
 931 0002 FFF7FEFF 		bl	HAL_Init
 932              	.LVL39:
  96:Core/Src/main.c ****   srand(HAL_GetTick());
 933              		.loc 1 96 3 view .LVU275
 934 0006 0C48     		ldr	r0, .L63
 935 0008 FFF7FEFF 		bl	fsm_init
 936              	.LVL40:
  97:Core/Src/main.c ****   /* USER CODE END Init */
 937              		.loc 1 97 3 view .LVU276
  97:Core/Src/main.c ****   /* USER CODE END Init */
 938              		.loc 1 97 9 is_stmt 0 view .LVU277
 939 000c FFF7FEFF 		bl	HAL_GetTick
 940              	.LVL41:
  97:Core/Src/main.c ****   /* USER CODE END Init */
 941              		.loc 1 97 3 discriminator 1 view .LVU278
 942 0010 FFF7FEFF 		bl	srand
 943              	.LVL42:
 101:Core/Src/main.c **** 
 944              		.loc 1 101 3 is_stmt 1 view .LVU279
 945 0014 FFF7FEFF 		bl	SystemClock_Config
 946              	.LVL43:
 108:Core/Src/main.c ****   MX_DMA_Init();
 947              		.loc 1 108 3 view .LVU280
 948 0018 FFF7FEFF 		bl	MX_GPIO_Init
 949              	.LVL44:
 109:Core/Src/main.c ****   MX_USART2_UART_Init();
 950              		.loc 1 109 3 view .LVU281
 951 001c FFF7FEFF 		bl	MX_DMA_Init
 952              	.LVL45:
 110:Core/Src/main.c ****   MX_ADC1_Init();
 953              		.loc 1 110 3 view .LVU282
 954 0020 FFF7FEFF 		bl	MX_USART2_UART_Init
 955              	.LVL46:
 111:Core/Src/main.c ****   MX_TIM2_Init();
 956              		.loc 1 111 3 view .LVU283
 957 0024 FFF7FEFF 		bl	MX_ADC1_Init
 958              	.LVL47:
 112:Core/Src/main.c ****   MX_TIM3_Init();
 959              		.loc 1 112 3 view .LVU284
 960 0028 FFF7FEFF 		bl	MX_TIM2_Init
 961              	.LVL48:
 113:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 962              		.loc 1 113 3 view .LVU285
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 46


 963 002c FFF7FEFF 		bl	MX_TIM3_Init
 964              	.LVL49:
 965              	.L61:
 120:Core/Src/main.c ****   {
 966              		.loc 1 120 3 view .LVU286
 122:Core/Src/main.c ****     /* USER CODE END WHILE */
 967              		.loc 1 122 5 discriminator 1 view .LVU287
 968 0030 0148     		ldr	r0, .L63
 969 0032 FFF7FEFF 		bl	fsm_run
 970              	.LVL50:
 120:Core/Src/main.c ****   {
 971              		.loc 1 120 9 view .LVU288
 972 0036 FBE7     		b	.L61
 973              	.L64:
 974              		.align	2
 975              	.L63:
 976 0038 00000000 		.word	fsm
 977              		.cfi_endproc
 978              	.LFE243:
 980              		.global	fsm
 981              		.section	.bss.fsm,"aw",%nobits
 982              		.align	2
 985              	fsm:
 986 0000 00       		.space	1
 987              		.global	adc_value
 988              		.section	.bss.adc_value,"aw",%nobits
 989              		.align	2
 992              	adc_value:
 993 0000 00000000 		.space	4
 994              		.global	huart2
 995              		.section	.bss.huart2,"aw",%nobits
 996              		.align	2
 999              	huart2:
 1000 0000 00000000 		.space	72
 1000      00000000 
 1000      00000000 
 1000      00000000 
 1000      00000000 
 1001              		.global	htim3
 1002              		.section	.bss.htim3,"aw",%nobits
 1003              		.align	2
 1006              	htim3:
 1007 0000 00000000 		.space	72
 1007      00000000 
 1007      00000000 
 1007      00000000 
 1007      00000000 
 1008              		.global	htim2
 1009              		.section	.bss.htim2,"aw",%nobits
 1010              		.align	2
 1013              	htim2:
 1014 0000 00000000 		.space	72
 1014      00000000 
 1014      00000000 
 1014      00000000 
 1014      00000000 
 1015              		.global	hdma_adc1
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 47


 1016              		.section	.bss.hdma_adc1,"aw",%nobits
 1017              		.align	2
 1020              	hdma_adc1:
 1021 0000 00000000 		.space	96
 1021      00000000 
 1021      00000000 
 1021      00000000 
 1021      00000000 
 1022              		.global	hadc1
 1023              		.section	.bss.hadc1,"aw",%nobits
 1024              		.align	2
 1027              	hadc1:
 1028 0000 00000000 		.space	72
 1028      00000000 
 1028      00000000 
 1028      00000000 
 1028      00000000 
 1029              		.global	adc_buffer
 1030              		.section	.bss.adc_buffer,"aw",%nobits
 1031              		.align	2
 1034              	adc_buffer:
 1035 0000 00000000 		.space	4
 1036              		.text
 1037              	.Letext0:
 1038              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1039              		.file 4 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1040              		.file 5 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1041              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1042              		.file 7 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1043              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1044              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1045              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1046              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1047              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1048              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1049              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1050              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1051              		.file 16 "Core/Inc/fsm_controller.h"
 1052              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1053              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1054              		.file 19 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-t
 1055              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1056              		.file 21 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-t
 1057              		.file 22 "<built-in>"
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 48


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:198    .text.MX_GPIO_Init:000000d0 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:205    .text.MX_DMA_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:210    .text.MX_DMA_Init:00000000 MX_DMA_Init
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:256    .text.MX_DMA_Init:00000030 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:261    .text.send_to_serial:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:267    .text.send_to_serial:00000000 send_to_serial
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:298    .text.send_to_serial:00000018 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:999    .bss.huart2:00000000 huart2
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:303    .text.Error_Handler:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:309    .text.Error_Handler:00000000 Error_Handler
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:351    .text.Error_Handler:00000014 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:985    .bss.fsm:00000000 fsm
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:356    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:361    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:415    .text.MX_USART2_UART_Init:0000002c $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:421    .text.MX_ADC1_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:426    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:528    .text.MX_ADC1_Init:00000060 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1027   .bss.hadc1:00000000 hadc1
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:535    .text.MX_TIM2_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:540    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:639    .text.MX_TIM2_Init:00000064 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1013   .bss.htim2:00000000 htim2
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:644    .text.MX_TIM3_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:649    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:748    .text.MX_TIM3_Init:00000060 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1006   .bss.htim3:00000000 htim3
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:754    .text.SystemClock_Config:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:760    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:907    .text.SystemClock_Config:0000009c $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:913    .text.main:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:919    .text.main:00000000 main
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:976    .text.main:00000038 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:982    .bss.fsm:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:992    .bss.adc_value:00000000 adc_value
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:989    .bss.adc_value:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:996    .bss.huart2:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1003   .bss.htim3:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1010   .bss.htim2:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1020   .bss.hdma_adc1:00000000 hdma_adc1
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1017   .bss.hdma_adc1:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1024   .bss.hadc1:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1034   .bss.adc_buffer:00000000 adc_buffer
C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s:1031   .bss.adc_buffer:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
strlen
HAL_UART_Transmit
change_state
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccKOWdHu.s 			page 49


fsm_run
HAL_UART_Init
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
fsm_init
HAL_GetTick
srand
