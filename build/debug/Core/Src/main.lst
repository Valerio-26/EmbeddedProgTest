ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/Src/main.c"
  20              		.section	.text.MX_GPIO_Init,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB250:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 2


  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
  34:Core/Src/main.c **** #define ADC_BUFFER_SIZE 1
  35:Core/Src/main.c **** uint32_t adc_buffer[ADC_BUFFER_SIZE];
  36:Core/Src/main.c **** 
  37:Core/Src/main.c **** /* USER CODE END PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  40:Core/Src/main.c **** /* USER CODE BEGIN PM */
  41:Core/Src/main.c **** 
  42:Core/Src/main.c **** /* USER CODE END PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  45:Core/Src/main.c **** ADC_HandleTypeDef hadc1;
  46:Core/Src/main.c **** DMA_HandleTypeDef hdma_adc1;
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  49:Core/Src/main.c **** TIM_HandleTypeDef htim3;
  50:Core/Src/main.c **** 
  51:Core/Src/main.c **** UART_HandleTypeDef huart2;
  52:Core/Src/main.c **** 
  53:Core/Src/main.c **** /* USER CODE BEGIN PV */
  54:Core/Src/main.c **** uint32_t adc_value = 0;
  55:Core/Src/main.c **** FsmController fsm;
  56:Core/Src/main.c **** /* USER CODE END PV */
  57:Core/Src/main.c **** 
  58:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  59:Core/Src/main.c **** void SystemClock_Config(void);
  60:Core/Src/main.c **** static void MX_GPIO_Init(void);
  61:Core/Src/main.c **** static void MX_DMA_Init(void);
  62:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  63:Core/Src/main.c **** static void MX_ADC1_Init(void);
  64:Core/Src/main.c **** static void MX_TIM2_Init(void);
  65:Core/Src/main.c **** static void MX_TIM3_Init(void);
  66:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  67:Core/Src/main.c **** 
  68:Core/Src/main.c **** /* USER CODE END PFP */
  69:Core/Src/main.c **** 
  70:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  71:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  72:Core/Src/main.c **** void send_to_serial(char *msg) {
  73:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
  74:Core/Src/main.c **** }
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** /* USER CODE END 0 */
  77:Core/Src/main.c **** 
  78:Core/Src/main.c **** /**
  79:Core/Src/main.c ****   * @brief  The application entry point.
  80:Core/Src/main.c ****   * @retval int
  81:Core/Src/main.c ****   */
  82:Core/Src/main.c **** int main(void)
  83:Core/Src/main.c **** {
  84:Core/Src/main.c **** 
  85:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
  86:Core/Src/main.c **** 
  87:Core/Src/main.c ****   /* USER CODE END 1 */
  88:Core/Src/main.c **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 3


  89:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
  90:Core/Src/main.c **** 
  91:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  92:Core/Src/main.c ****   HAL_Init();
  93:Core/Src/main.c **** 
  94:Core/Src/main.c ****   /* USER CODE BEGIN Init */
  95:Core/Src/main.c ****   fsm_init(&fsm);
  96:Core/Src/main.c ****   /* USER CODE END Init */
  97:Core/Src/main.c **** 
  98:Core/Src/main.c ****   /* Configure the system clock */
  99:Core/Src/main.c ****   SystemClock_Config();
 100:Core/Src/main.c **** 
 101:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 102:Core/Src/main.c **** 
 103:Core/Src/main.c ****   /* USER CODE END SysInit */
 104:Core/Src/main.c **** 
 105:Core/Src/main.c ****   /* Initialize all configured peripherals */
 106:Core/Src/main.c ****   MX_GPIO_Init();
 107:Core/Src/main.c ****   MX_DMA_Init();
 108:Core/Src/main.c ****   MX_USART2_UART_Init();
 109:Core/Src/main.c ****   MX_ADC1_Init();
 110:Core/Src/main.c ****   MX_TIM2_Init();
 111:Core/Src/main.c ****   MX_TIM3_Init();
 112:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 113:Core/Src/main.c ****   fsm_run(&fsm);
 114:Core/Src/main.c ****   /* USER CODE END 2 */
 115:Core/Src/main.c **** 
 116:Core/Src/main.c ****   /* Infinite loop */
 117:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 118:Core/Src/main.c ****   while (1)
 119:Core/Src/main.c ****   {
 120:Core/Src/main.c ****     /* USER CODE END WHILE */
 121:Core/Src/main.c **** 
 122:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   }
 125:Core/Src/main.c ****   /* USER CODE END 3 */
 126:Core/Src/main.c **** }
 127:Core/Src/main.c **** 
 128:Core/Src/main.c **** /**
 129:Core/Src/main.c ****   * @brief System Clock Configuration
 130:Core/Src/main.c ****   * @retval None
 131:Core/Src/main.c ****   */
 132:Core/Src/main.c **** void SystemClock_Config(void)
 133:Core/Src/main.c **** {
 134:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 135:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 136:Core/Src/main.c **** 
 137:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 138:Core/Src/main.c ****   */
 139:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 140:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 141:Core/Src/main.c **** 
 142:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 143:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 144:Core/Src/main.c ****   */
 145:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 4


 146:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 147:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 150:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 151:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 154:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 155:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 156:Core/Src/main.c ****   {
 157:Core/Src/main.c ****     Error_Handler();
 158:Core/Src/main.c ****   }
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 161:Core/Src/main.c ****   */
 162:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 163:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 164:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 165:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 166:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 167:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 168:Core/Src/main.c **** 
 169:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 170:Core/Src/main.c ****   {
 171:Core/Src/main.c ****     Error_Handler();
 172:Core/Src/main.c ****   }
 173:Core/Src/main.c **** }
 174:Core/Src/main.c **** 
 175:Core/Src/main.c **** /**
 176:Core/Src/main.c ****   * @brief ADC1 Initialization Function
 177:Core/Src/main.c ****   * @param None
 178:Core/Src/main.c ****   * @retval None
 179:Core/Src/main.c ****   */
 180:Core/Src/main.c **** static void MX_ADC1_Init(void)
 181:Core/Src/main.c **** {
 182:Core/Src/main.c **** 
 183:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 0 */
 184:Core/Src/main.c **** 
 185:Core/Src/main.c ****   /* USER CODE END ADC1_Init 0 */
 186:Core/Src/main.c **** 
 187:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 188:Core/Src/main.c **** 
 189:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 1 */
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   /* USER CODE END ADC1_Init 1 */
 192:Core/Src/main.c **** 
 193:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 194:Core/Src/main.c ****   */
 195:Core/Src/main.c ****   hadc1.Instance = ADC1;
 196:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 197:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 198:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 199:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 200:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 201:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 202:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 5


 203:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 204:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 205:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 206:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 207:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 208:Core/Src/main.c ****   {
 209:Core/Src/main.c ****     Error_Handler();
 210:Core/Src/main.c ****   }
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****   /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and it
 213:Core/Src/main.c ****   */
 214:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_1;
 215:Core/Src/main.c ****   sConfig.Rank = 1;
 216:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 217:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 218:Core/Src/main.c ****   {
 219:Core/Src/main.c ****     Error_Handler();
 220:Core/Src/main.c ****   }
 221:Core/Src/main.c ****   /* USER CODE BEGIN ADC1_Init 2 */
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****   /* USER CODE END ADC1_Init 2 */
 224:Core/Src/main.c **** 
 225:Core/Src/main.c **** }
 226:Core/Src/main.c **** 
 227:Core/Src/main.c **** /**
 228:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 229:Core/Src/main.c ****   * @param None
 230:Core/Src/main.c ****   * @retval None
 231:Core/Src/main.c ****   */
 232:Core/Src/main.c **** static void MX_TIM2_Init(void)
 233:Core/Src/main.c **** {
 234:Core/Src/main.c **** 
 235:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 238:Core/Src/main.c **** 
 239:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 240:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 241:Core/Src/main.c **** 
 242:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 243:Core/Src/main.c **** 
 244:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 245:Core/Src/main.c ****   htim2.Instance = TIM2;
 246:Core/Src/main.c ****   htim2.Init.Prescaler = 1000;
 247:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 248:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 249:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 250:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 251:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 252:Core/Src/main.c ****   {
 253:Core/Src/main.c ****     Error_Handler();
 254:Core/Src/main.c ****   }
 255:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 256:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 257:Core/Src/main.c ****   {
 258:Core/Src/main.c ****     Error_Handler();
 259:Core/Src/main.c ****   }
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 6


 260:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 261:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 262:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 263:Core/Src/main.c ****   {
 264:Core/Src/main.c ****     Error_Handler();
 265:Core/Src/main.c ****   }
 266:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 267:Core/Src/main.c **** 
 268:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 269:Core/Src/main.c **** 
 270:Core/Src/main.c **** }
 271:Core/Src/main.c **** 
 272:Core/Src/main.c **** /**
 273:Core/Src/main.c ****   * @brief TIM3 Initialization Function
 274:Core/Src/main.c ****   * @param None
 275:Core/Src/main.c ****   * @retval None
 276:Core/Src/main.c ****   */
 277:Core/Src/main.c **** static void MX_TIM3_Init(void)
 278:Core/Src/main.c **** {
 279:Core/Src/main.c **** 
 280:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 0 */
 281:Core/Src/main.c **** 
 282:Core/Src/main.c ****   /* USER CODE END TIM3_Init 0 */
 283:Core/Src/main.c **** 
 284:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 285:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 286:Core/Src/main.c **** 
 287:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 1 */
 288:Core/Src/main.c **** 
 289:Core/Src/main.c ****   /* USER CODE END TIM3_Init 1 */
 290:Core/Src/main.c ****   htim3.Instance = TIM3;
 291:Core/Src/main.c ****   htim3.Init.Prescaler = 50;
 292:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 293:Core/Src/main.c ****   htim3.Init.Period = 65535;
 294:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 295:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 296:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 297:Core/Src/main.c ****   {
 298:Core/Src/main.c ****     Error_Handler();
 299:Core/Src/main.c ****   }
 300:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 301:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 302:Core/Src/main.c ****   {
 303:Core/Src/main.c ****     Error_Handler();
 304:Core/Src/main.c ****   }
 305:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 306:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 307:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 308:Core/Src/main.c ****   {
 309:Core/Src/main.c ****     Error_Handler();
 310:Core/Src/main.c ****   }
 311:Core/Src/main.c ****   /* USER CODE BEGIN TIM3_Init 2 */
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****   /* USER CODE END TIM3_Init 2 */
 314:Core/Src/main.c **** 
 315:Core/Src/main.c **** }
 316:Core/Src/main.c **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 7


 317:Core/Src/main.c **** /**
 318:Core/Src/main.c ****   * @brief USART2 Initialization Function
 319:Core/Src/main.c ****   * @param None
 320:Core/Src/main.c ****   * @retval None
 321:Core/Src/main.c ****   */
 322:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 323:Core/Src/main.c **** {
 324:Core/Src/main.c **** 
 325:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 328:Core/Src/main.c **** 
 329:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 332:Core/Src/main.c ****   huart2.Instance = USART2;
 333:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 334:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 335:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 336:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 337:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 338:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 339:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 340:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 341:Core/Src/main.c ****   {
 342:Core/Src/main.c ****     Error_Handler();
 343:Core/Src/main.c ****   }
 344:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 345:Core/Src/main.c **** 
 346:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 347:Core/Src/main.c **** 
 348:Core/Src/main.c **** }
 349:Core/Src/main.c **** 
 350:Core/Src/main.c **** /**
 351:Core/Src/main.c ****   * Enable DMA controller clock
 352:Core/Src/main.c ****   */
 353:Core/Src/main.c **** static void MX_DMA_Init(void)
 354:Core/Src/main.c **** {
 355:Core/Src/main.c **** 
 356:Core/Src/main.c ****   /* DMA controller clock enable */
 357:Core/Src/main.c ****   __HAL_RCC_DMA2_CLK_ENABLE();
 358:Core/Src/main.c **** 
 359:Core/Src/main.c ****   /* DMA interrupt init */
 360:Core/Src/main.c ****   /* DMA2_Stream0_IRQn interrupt configuration */
 361:Core/Src/main.c ****   HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 362:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 363:Core/Src/main.c **** 
 364:Core/Src/main.c **** }
 365:Core/Src/main.c **** 
 366:Core/Src/main.c **** /**
 367:Core/Src/main.c ****   * @brief GPIO Initialization Function
 368:Core/Src/main.c ****   * @param None
 369:Core/Src/main.c ****   * @retval None
 370:Core/Src/main.c ****   */
 371:Core/Src/main.c **** static void MX_GPIO_Init(void)
 372:Core/Src/main.c **** {
  28              		.loc 1 372 1 view -0
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 8


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 40
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 8BB0     		sub	sp, sp, #44
  40              		.cfi_def_cfa_offset 64
 373:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  41              		.loc 1 373 3 view .LVU1
  42              		.loc 1 373 20 is_stmt 0 view .LVU2
  43 0004 0024     		movs	r4, #0
  44 0006 0594     		str	r4, [sp, #20]
  45 0008 0694     		str	r4, [sp, #24]
  46 000a 0794     		str	r4, [sp, #28]
  47 000c 0894     		str	r4, [sp, #32]
  48 000e 0994     		str	r4, [sp, #36]
 374:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 375:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 376:Core/Src/main.c **** 
 377:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 378:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  49              		.loc 1 378 3 is_stmt 1 view .LVU3
  50              	.LBB4:
  51              		.loc 1 378 3 view .LVU4
  52 0010 0194     		str	r4, [sp, #4]
  53              		.loc 1 378 3 view .LVU5
  54 0012 2E4B     		ldr	r3, .L3
  55 0014 1A6B     		ldr	r2, [r3, #48]
  56 0016 42F00402 		orr	r2, r2, #4
  57 001a 1A63     		str	r2, [r3, #48]
  58              		.loc 1 378 3 view .LVU6
  59 001c 1A6B     		ldr	r2, [r3, #48]
  60 001e 02F00402 		and	r2, r2, #4
  61 0022 0192     		str	r2, [sp, #4]
  62              		.loc 1 378 3 view .LVU7
  63 0024 019A     		ldr	r2, [sp, #4]
  64              	.LBE4:
  65              		.loc 1 378 3 view .LVU8
 379:Core/Src/main.c ****   __HAL_RCC_GPIOH_CLK_ENABLE();
  66              		.loc 1 379 3 view .LVU9
  67              	.LBB5:
  68              		.loc 1 379 3 view .LVU10
  69 0026 0294     		str	r4, [sp, #8]
  70              		.loc 1 379 3 view .LVU11
  71 0028 1A6B     		ldr	r2, [r3, #48]
  72 002a 42F08002 		orr	r2, r2, #128
  73 002e 1A63     		str	r2, [r3, #48]
  74              		.loc 1 379 3 view .LVU12
  75 0030 1A6B     		ldr	r2, [r3, #48]
  76 0032 02F08002 		and	r2, r2, #128
  77 0036 0292     		str	r2, [sp, #8]
  78              		.loc 1 379 3 view .LVU13
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 9


  79 0038 029A     		ldr	r2, [sp, #8]
  80              	.LBE5:
  81              		.loc 1 379 3 view .LVU14
 380:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  82              		.loc 1 380 3 view .LVU15
  83              	.LBB6:
  84              		.loc 1 380 3 view .LVU16
  85 003a 0394     		str	r4, [sp, #12]
  86              		.loc 1 380 3 view .LVU17
  87 003c 1A6B     		ldr	r2, [r3, #48]
  88 003e 42F00102 		orr	r2, r2, #1
  89 0042 1A63     		str	r2, [r3, #48]
  90              		.loc 1 380 3 view .LVU18
  91 0044 1A6B     		ldr	r2, [r3, #48]
  92 0046 02F00102 		and	r2, r2, #1
  93 004a 0392     		str	r2, [sp, #12]
  94              		.loc 1 380 3 view .LVU19
  95 004c 039A     		ldr	r2, [sp, #12]
  96              	.LBE6:
  97              		.loc 1 380 3 view .LVU20
 381:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  98              		.loc 1 381 3 view .LVU21
  99              	.LBB7:
 100              		.loc 1 381 3 view .LVU22
 101 004e 0494     		str	r4, [sp, #16]
 102              		.loc 1 381 3 view .LVU23
 103 0050 1A6B     		ldr	r2, [r3, #48]
 104 0052 42F00202 		orr	r2, r2, #2
 105 0056 1A63     		str	r2, [r3, #48]
 106              		.loc 1 381 3 view .LVU24
 107 0058 1B6B     		ldr	r3, [r3, #48]
 108 005a 03F00203 		and	r3, r3, #2
 109 005e 0493     		str	r3, [sp, #16]
 110              		.loc 1 381 3 view .LVU25
 111 0060 049B     		ldr	r3, [sp, #16]
 112              	.LBE7:
 113              		.loc 1 381 3 view .LVU26
 382:Core/Src/main.c **** 
 383:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 384:Core/Src/main.c ****   HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 114              		.loc 1 384 3 view .LVU27
 115 0062 1B4D     		ldr	r5, .L3+4
 116 0064 2246     		mov	r2, r4
 117 0066 2021     		movs	r1, #32
 118 0068 2846     		mov	r0, r5
 119 006a FFF7FEFF 		bl	HAL_GPIO_WritePin
 120              	.LVL0:
 385:Core/Src/main.c **** 
 386:Core/Src/main.c ****   /*Configure GPIO pin : B1_Pin */
 387:Core/Src/main.c ****   GPIO_InitStruct.Pin = B1_Pin;
 121              		.loc 1 387 3 view .LVU28
 122              		.loc 1 387 23 is_stmt 0 view .LVU29
 123 006e 4FF40053 		mov	r3, #8192
 124 0072 0593     		str	r3, [sp, #20]
 388:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 125              		.loc 1 388 3 is_stmt 1 view .LVU30
 126              		.loc 1 388 24 is_stmt 0 view .LVU31
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 10


 127 0074 4FF48817 		mov	r7, #1114112
 128 0078 0697     		str	r7, [sp, #24]
 389:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 129              		.loc 1 389 3 is_stmt 1 view .LVU32
 130              		.loc 1 389 24 is_stmt 0 view .LVU33
 131 007a 0794     		str	r4, [sp, #28]
 390:Core/Src/main.c ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 132              		.loc 1 390 3 is_stmt 1 view .LVU34
 133 007c 05A9     		add	r1, sp, #20
 134 007e 1548     		ldr	r0, .L3+8
 135 0080 FFF7FEFF 		bl	HAL_GPIO_Init
 136              	.LVL1:
 391:Core/Src/main.c **** 
 392:Core/Src/main.c ****   /*Configure GPIO pin : PA0 */
 393:Core/Src/main.c ****   GPIO_InitStruct.Pin = GPIO_PIN_0;
 137              		.loc 1 393 3 view .LVU35
 138              		.loc 1 393 23 is_stmt 0 view .LVU36
 139 0084 0126     		movs	r6, #1
 140 0086 0596     		str	r6, [sp, #20]
 394:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 141              		.loc 1 394 3 is_stmt 1 view .LVU37
 142              		.loc 1 394 24 is_stmt 0 view .LVU38
 143 0088 0697     		str	r7, [sp, #24]
 395:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 144              		.loc 1 395 3 is_stmt 1 view .LVU39
 145              		.loc 1 395 24 is_stmt 0 view .LVU40
 146 008a 0794     		str	r4, [sp, #28]
 396:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 147              		.loc 1 396 3 is_stmt 1 view .LVU41
 148 008c 05A9     		add	r1, sp, #20
 149 008e 2846     		mov	r0, r5
 150 0090 FFF7FEFF 		bl	HAL_GPIO_Init
 151              	.LVL2:
 397:Core/Src/main.c **** 
 398:Core/Src/main.c ****   /*Configure GPIO pin : LD2_Pin */
 399:Core/Src/main.c ****   GPIO_InitStruct.Pin = LD2_Pin;
 152              		.loc 1 399 3 view .LVU42
 153              		.loc 1 399 23 is_stmt 0 view .LVU43
 154 0094 2023     		movs	r3, #32
 155 0096 0593     		str	r3, [sp, #20]
 400:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 156              		.loc 1 400 3 is_stmt 1 view .LVU44
 157              		.loc 1 400 24 is_stmt 0 view .LVU45
 158 0098 0696     		str	r6, [sp, #24]
 401:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 159              		.loc 1 401 3 is_stmt 1 view .LVU46
 160              		.loc 1 401 24 is_stmt 0 view .LVU47
 161 009a 0794     		str	r4, [sp, #28]
 402:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 162              		.loc 1 402 3 is_stmt 1 view .LVU48
 163              		.loc 1 402 25 is_stmt 0 view .LVU49
 164 009c 0894     		str	r4, [sp, #32]
 403:Core/Src/main.c ****   HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 165              		.loc 1 403 3 is_stmt 1 view .LVU50
 166 009e 05A9     		add	r1, sp, #20
 167 00a0 2846     		mov	r0, r5
 168 00a2 FFF7FEFF 		bl	HAL_GPIO_Init
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 11


 169              	.LVL3:
 404:Core/Src/main.c **** 
 405:Core/Src/main.c ****   /* EXTI interrupt init*/
 406:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 170              		.loc 1 406 3 view .LVU51
 171 00a6 2246     		mov	r2, r4
 172 00a8 2146     		mov	r1, r4
 173 00aa 0620     		movs	r0, #6
 174 00ac FFF7FEFF 		bl	HAL_NVIC_SetPriority
 175              	.LVL4:
 407:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 176              		.loc 1 407 3 view .LVU52
 177 00b0 0620     		movs	r0, #6
 178 00b2 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 179              	.LVL5:
 408:Core/Src/main.c **** 
 409:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 180              		.loc 1 409 3 view .LVU53
 181 00b6 2246     		mov	r2, r4
 182 00b8 2146     		mov	r1, r4
 183 00ba 2820     		movs	r0, #40
 184 00bc FFF7FEFF 		bl	HAL_NVIC_SetPriority
 185              	.LVL6:
 410:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 186              		.loc 1 410 3 view .LVU54
 187 00c0 2820     		movs	r0, #40
 188 00c2 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 189              	.LVL7:
 411:Core/Src/main.c **** 
 412:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 413:Core/Src/main.c **** 
 414:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 415:Core/Src/main.c **** }
 190              		.loc 1 415 1 is_stmt 0 view .LVU55
 191 00c6 0BB0     		add	sp, sp, #44
 192              		.cfi_def_cfa_offset 20
 193              		@ sp needed
 194 00c8 F0BD     		pop	{r4, r5, r6, r7, pc}
 195              	.L4:
 196 00ca 00BF     		.align	2
 197              	.L3:
 198 00cc 00380240 		.word	1073887232
 199 00d0 00000240 		.word	1073872896
 200 00d4 00080240 		.word	1073874944
 201              		.cfi_endproc
 202              	.LFE250:
 204              		.section	.text.MX_DMA_Init,"ax",%progbits
 205              		.align	1
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	MX_DMA_Init:
 211              	.LFB249:
 354:Core/Src/main.c **** 
 212              		.loc 1 354 1 is_stmt 1 view -0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 12


 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216 0000 00B5     		push	{lr}
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 14, -4
 219 0002 83B0     		sub	sp, sp, #12
 220              		.cfi_def_cfa_offset 16
 357:Core/Src/main.c **** 
 221              		.loc 1 357 3 view .LVU57
 222              	.LBB8:
 357:Core/Src/main.c **** 
 223              		.loc 1 357 3 view .LVU58
 224 0004 0021     		movs	r1, #0
 225 0006 0191     		str	r1, [sp, #4]
 357:Core/Src/main.c **** 
 226              		.loc 1 357 3 view .LVU59
 227 0008 094B     		ldr	r3, .L7
 228 000a 1A6B     		ldr	r2, [r3, #48]
 229 000c 42F48002 		orr	r2, r2, #4194304
 230 0010 1A63     		str	r2, [r3, #48]
 357:Core/Src/main.c **** 
 231              		.loc 1 357 3 view .LVU60
 232 0012 1B6B     		ldr	r3, [r3, #48]
 233 0014 03F48003 		and	r3, r3, #4194304
 234 0018 0193     		str	r3, [sp, #4]
 357:Core/Src/main.c **** 
 235              		.loc 1 357 3 view .LVU61
 236 001a 019B     		ldr	r3, [sp, #4]
 237              	.LBE8:
 357:Core/Src/main.c **** 
 238              		.loc 1 357 3 view .LVU62
 361:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 239              		.loc 1 361 3 view .LVU63
 240 001c 0A46     		mov	r2, r1
 241 001e 3820     		movs	r0, #56
 242 0020 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 243              	.LVL8:
 362:Core/Src/main.c **** 
 244              		.loc 1 362 3 view .LVU64
 245 0024 3820     		movs	r0, #56
 246 0026 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 247              	.LVL9:
 364:Core/Src/main.c **** 
 248              		.loc 1 364 1 is_stmt 0 view .LVU65
 249 002a 03B0     		add	sp, sp, #12
 250              		.cfi_def_cfa_offset 4
 251              		@ sp needed
 252 002c 5DF804FB 		ldr	pc, [sp], #4
 253              	.L8:
 254              		.align	2
 255              	.L7:
 256 0030 00380240 		.word	1073887232
 257              		.cfi_endproc
 258              	.LFE249:
 260              		.section	.text.send_to_serial,"ax",%progbits
 261              		.align	1
 262              		.global	send_to_serial
 263              		.syntax unified
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 13


 264              		.thumb
 265              		.thumb_func
 267              	send_to_serial:
 268              	.LVL10:
 269              	.LFB242:
  72:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 270              		.loc 1 72 32 is_stmt 1 view -0
 271              		.cfi_startproc
 272              		@ args = 0, pretend = 0, frame = 0
 273              		@ frame_needed = 0, uses_anonymous_args = 0
  72:Core/Src/main.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 274              		.loc 1 72 32 is_stmt 0 view .LVU67
 275 0000 10B5     		push	{r4, lr}
 276              		.cfi_def_cfa_offset 8
 277              		.cfi_offset 4, -8
 278              		.cfi_offset 14, -4
 279 0002 0446     		mov	r4, r0
  73:Core/Src/main.c **** }
 280              		.loc 1 73 3 is_stmt 1 view .LVU68
  73:Core/Src/main.c **** }
 281              		.loc 1 73 45 is_stmt 0 view .LVU69
 282 0004 FFF7FEFF 		bl	strlen
 283              	.LVL11:
  73:Core/Src/main.c **** }
 284              		.loc 1 73 3 discriminator 1 view .LVU70
 285 0008 4FF0FF33 		mov	r3, #-1
 286 000c 82B2     		uxth	r2, r0
 287 000e 2146     		mov	r1, r4
 288 0010 0148     		ldr	r0, .L11
 289 0012 FFF7FEFF 		bl	HAL_UART_Transmit
 290              	.LVL12:
  74:Core/Src/main.c **** 
 291              		.loc 1 74 1 view .LVU71
 292 0016 10BD     		pop	{r4, pc}
 293              	.LVL13:
 294              	.L12:
  74:Core/Src/main.c **** 
 295              		.loc 1 74 1 view .LVU72
 296              		.align	2
 297              	.L11:
 298 0018 00000000 		.word	huart2
 299              		.cfi_endproc
 300              	.LFE242:
 302              		.section	.text.Error_Handler,"ax",%progbits
 303              		.align	1
 304              		.global	Error_Handler
 305              		.syntax unified
 306              		.thumb
 307              		.thumb_func
 309              	Error_Handler:
 310              	.LFB251:
 416:Core/Src/main.c **** 
 417:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 418:Core/Src/main.c **** 
 419:Core/Src/main.c **** /* USER CODE END 4 */
 420:Core/Src/main.c **** 
 421:Core/Src/main.c **** /**
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 14


 422:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 423:Core/Src/main.c ****   * @retval None
 424:Core/Src/main.c ****   */
 425:Core/Src/main.c **** void Error_Handler(void)
 426:Core/Src/main.c **** {
 311              		.loc 1 426 1 is_stmt 1 view -0
 312              		.cfi_startproc
 313              		@ Volatile: function does not return.
 314              		@ args = 0, pretend = 0, frame = 0
 315              		@ frame_needed = 0, uses_anonymous_args = 0
 316              		@ link register save eliminated.
 427:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 428:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 429:Core/Src/main.c ****   //change_state(&fsm, FSMERROR);
 430:Core/Src/main.c ****   //fsm_run(&fsm);
 431:Core/Src/main.c **** 
 432:Core/Src/main.c ****   __disable_irq();
 317              		.loc 1 432 3 view .LVU74
 318              	.LBB9:
 319              	.LBI9:
 320              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 15


  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 16


  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 17


 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 18


 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 19


 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 20


 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 21


 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 22


 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 23


 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 24


 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 25


 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 26


 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 27


 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 28


 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 29


 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 30


 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 31


 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 321              		.loc 2 960 27 view .LVU75
 322              	.LBB10:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 323              		.loc 2 962 3 view .LVU76
 324              		.syntax unified
 325              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 326 0000 72B6     		cpsid i
 327              	@ 0 "" 2
 328              		.thumb
 329              		.syntax unified
 330              	.L14:
 331              	.LBE10:
 332              	.LBE9:
 433:Core/Src/main.c ****   while (1)
 333              		.loc 1 433 3 view .LVU77
 434:Core/Src/main.c ****   {
 435:Core/Src/main.c ****   }
 334              		.loc 1 435 3 view .LVU78
 433:Core/Src/main.c ****   while (1)
 335              		.loc 1 433 9 view .LVU79
 336 0002 FEE7     		b	.L14
 337              		.cfi_endproc
 338              	.LFE251:
 340              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 341              		.align	1
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	MX_USART2_UART_Init:
 347              	.LFB248:
 323:Core/Src/main.c **** 
 348              		.loc 1 323 1 view -0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352 0000 08B5     		push	{r3, lr}
 353              		.cfi_def_cfa_offset 8
 354              		.cfi_offset 3, -8
 355              		.cfi_offset 14, -4
 332:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 356              		.loc 1 332 3 view .LVU81
 332:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 357              		.loc 1 332 19 is_stmt 0 view .LVU82
 358 0002 0A48     		ldr	r0, .L19
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 32


 359 0004 0A4B     		ldr	r3, .L19+4
 360 0006 0360     		str	r3, [r0]
 333:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 361              		.loc 1 333 3 is_stmt 1 view .LVU83
 333:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 362              		.loc 1 333 24 is_stmt 0 view .LVU84
 363 0008 4FF4E133 		mov	r3, #115200
 364 000c 4360     		str	r3, [r0, #4]
 334:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 365              		.loc 1 334 3 is_stmt 1 view .LVU85
 334:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 366              		.loc 1 334 26 is_stmt 0 view .LVU86
 367 000e 0023     		movs	r3, #0
 368 0010 8360     		str	r3, [r0, #8]
 335:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 369              		.loc 1 335 3 is_stmt 1 view .LVU87
 335:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 370              		.loc 1 335 24 is_stmt 0 view .LVU88
 371 0012 C360     		str	r3, [r0, #12]
 336:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 372              		.loc 1 336 3 is_stmt 1 view .LVU89
 336:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 373              		.loc 1 336 22 is_stmt 0 view .LVU90
 374 0014 0361     		str	r3, [r0, #16]
 337:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 375              		.loc 1 337 3 is_stmt 1 view .LVU91
 337:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 376              		.loc 1 337 20 is_stmt 0 view .LVU92
 377 0016 0C22     		movs	r2, #12
 378 0018 4261     		str	r2, [r0, #20]
 338:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 379              		.loc 1 338 3 is_stmt 1 view .LVU93
 338:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 380              		.loc 1 338 25 is_stmt 0 view .LVU94
 381 001a 8361     		str	r3, [r0, #24]
 339:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 382              		.loc 1 339 3 is_stmt 1 view .LVU95
 339:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 383              		.loc 1 339 28 is_stmt 0 view .LVU96
 384 001c C361     		str	r3, [r0, #28]
 340:Core/Src/main.c ****   {
 385              		.loc 1 340 3 is_stmt 1 view .LVU97
 340:Core/Src/main.c ****   {
 386              		.loc 1 340 7 is_stmt 0 view .LVU98
 387 001e FFF7FEFF 		bl	HAL_UART_Init
 388              	.LVL14:
 340:Core/Src/main.c ****   {
 389              		.loc 1 340 6 discriminator 1 view .LVU99
 390 0022 00B9     		cbnz	r0, .L18
 348:Core/Src/main.c **** 
 391              		.loc 1 348 1 view .LVU100
 392 0024 08BD     		pop	{r3, pc}
 393              	.L18:
 342:Core/Src/main.c ****   }
 394              		.loc 1 342 5 is_stmt 1 view .LVU101
 395 0026 FFF7FEFF 		bl	Error_Handler
 396              	.LVL15:
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 33


 397              	.L20:
 398 002a 00BF     		.align	2
 399              	.L19:
 400 002c 00000000 		.word	huart2
 401 0030 00440040 		.word	1073759232
 402              		.cfi_endproc
 403              	.LFE248:
 405              		.section	.text.MX_ADC1_Init,"ax",%progbits
 406              		.align	1
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 411              	MX_ADC1_Init:
 412              	.LFB245:
 181:Core/Src/main.c **** 
 413              		.loc 1 181 1 view -0
 414              		.cfi_startproc
 415              		@ args = 0, pretend = 0, frame = 16
 416              		@ frame_needed = 0, uses_anonymous_args = 0
 417 0000 00B5     		push	{lr}
 418              		.cfi_def_cfa_offset 4
 419              		.cfi_offset 14, -4
 420 0002 85B0     		sub	sp, sp, #20
 421              		.cfi_def_cfa_offset 24
 187:Core/Src/main.c **** 
 422              		.loc 1 187 3 view .LVU103
 187:Core/Src/main.c **** 
 423              		.loc 1 187 26 is_stmt 0 view .LVU104
 424 0004 0023     		movs	r3, #0
 425 0006 0093     		str	r3, [sp]
 426 0008 0193     		str	r3, [sp, #4]
 427 000a 0293     		str	r3, [sp, #8]
 428 000c 0393     		str	r3, [sp, #12]
 195:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 429              		.loc 1 195 3 is_stmt 1 view .LVU105
 195:Core/Src/main.c ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 430              		.loc 1 195 18 is_stmt 0 view .LVU106
 431 000e 1448     		ldr	r0, .L27
 432 0010 144A     		ldr	r2, .L27+4
 433 0012 0260     		str	r2, [r0]
 196:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 434              		.loc 1 196 3 is_stmt 1 view .LVU107
 196:Core/Src/main.c ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 435              		.loc 1 196 29 is_stmt 0 view .LVU108
 436 0014 4FF48032 		mov	r2, #65536
 437 0018 4260     		str	r2, [r0, #4]
 197:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 438              		.loc 1 197 3 is_stmt 1 view .LVU109
 197:Core/Src/main.c ****   hadc1.Init.ScanConvMode = DISABLE;
 439              		.loc 1 197 25 is_stmt 0 view .LVU110
 440 001a 8360     		str	r3, [r0, #8]
 198:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 441              		.loc 1 198 3 is_stmt 1 view .LVU111
 198:Core/Src/main.c ****   hadc1.Init.ContinuousConvMode = DISABLE;
 442              		.loc 1 198 27 is_stmt 0 view .LVU112
 443 001c 0361     		str	r3, [r0, #16]
 199:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 34


 444              		.loc 1 199 3 is_stmt 1 view .LVU113
 199:Core/Src/main.c ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 445              		.loc 1 199 33 is_stmt 0 view .LVU114
 446 001e 0376     		strb	r3, [r0, #24]
 200:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 447              		.loc 1 200 3 is_stmt 1 view .LVU115
 200:Core/Src/main.c ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 448              		.loc 1 200 36 is_stmt 0 view .LVU116
 449 0020 80F82030 		strb	r3, [r0, #32]
 201:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 450              		.loc 1 201 3 is_stmt 1 view .LVU117
 201:Core/Src/main.c ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 451              		.loc 1 201 35 is_stmt 0 view .LVU118
 452 0024 C362     		str	r3, [r0, #44]
 202:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 453              		.loc 1 202 3 is_stmt 1 view .LVU119
 202:Core/Src/main.c ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 454              		.loc 1 202 31 is_stmt 0 view .LVU120
 455 0026 104A     		ldr	r2, .L27+8
 456 0028 8262     		str	r2, [r0, #40]
 203:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 457              		.loc 1 203 3 is_stmt 1 view .LVU121
 203:Core/Src/main.c ****   hadc1.Init.NbrOfConversion = 1;
 458              		.loc 1 203 24 is_stmt 0 view .LVU122
 459 002a C360     		str	r3, [r0, #12]
 204:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 460              		.loc 1 204 3 is_stmt 1 view .LVU123
 204:Core/Src/main.c ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 461              		.loc 1 204 30 is_stmt 0 view .LVU124
 462 002c 0122     		movs	r2, #1
 463 002e C261     		str	r2, [r0, #28]
 205:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 464              		.loc 1 205 3 is_stmt 1 view .LVU125
 205:Core/Src/main.c ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 465              		.loc 1 205 36 is_stmt 0 view .LVU126
 466 0030 80F83030 		strb	r3, [r0, #48]
 206:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 467              		.loc 1 206 3 is_stmt 1 view .LVU127
 206:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 468              		.loc 1 206 27 is_stmt 0 view .LVU128
 469 0034 4261     		str	r2, [r0, #20]
 207:Core/Src/main.c ****   {
 470              		.loc 1 207 3 is_stmt 1 view .LVU129
 207:Core/Src/main.c ****   {
 471              		.loc 1 207 7 is_stmt 0 view .LVU130
 472 0036 FFF7FEFF 		bl	HAL_ADC_Init
 473              	.LVL16:
 207:Core/Src/main.c ****   {
 474              		.loc 1 207 6 discriminator 1 view .LVU131
 475 003a 60B9     		cbnz	r0, .L25
 214:Core/Src/main.c ****   sConfig.Rank = 1;
 476              		.loc 1 214 3 is_stmt 1 view .LVU132
 214:Core/Src/main.c ****   sConfig.Rank = 1;
 477              		.loc 1 214 19 is_stmt 0 view .LVU133
 478 003c 0123     		movs	r3, #1
 479 003e 0093     		str	r3, [sp]
 215:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 35


 480              		.loc 1 215 3 is_stmt 1 view .LVU134
 215:Core/Src/main.c ****   sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 481              		.loc 1 215 16 is_stmt 0 view .LVU135
 482 0040 0193     		str	r3, [sp, #4]
 216:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 483              		.loc 1 216 3 is_stmt 1 view .LVU136
 216:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 484              		.loc 1 216 24 is_stmt 0 view .LVU137
 485 0042 0023     		movs	r3, #0
 486 0044 0293     		str	r3, [sp, #8]
 217:Core/Src/main.c ****   {
 487              		.loc 1 217 3 is_stmt 1 view .LVU138
 217:Core/Src/main.c ****   {
 488              		.loc 1 217 7 is_stmt 0 view .LVU139
 489 0046 6946     		mov	r1, sp
 490 0048 0548     		ldr	r0, .L27
 491 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 492              	.LVL17:
 217:Core/Src/main.c ****   {
 493              		.loc 1 217 6 discriminator 1 view .LVU140
 494 004e 20B9     		cbnz	r0, .L26
 225:Core/Src/main.c **** 
 495              		.loc 1 225 1 view .LVU141
 496 0050 05B0     		add	sp, sp, #20
 497              		.cfi_remember_state
 498              		.cfi_def_cfa_offset 4
 499              		@ sp needed
 500 0052 5DF804FB 		ldr	pc, [sp], #4
 501              	.L25:
 502              		.cfi_restore_state
 209:Core/Src/main.c ****   }
 503              		.loc 1 209 5 is_stmt 1 view .LVU142
 504 0056 FFF7FEFF 		bl	Error_Handler
 505              	.LVL18:
 506              	.L26:
 219:Core/Src/main.c ****   }
 507              		.loc 1 219 5 view .LVU143
 508 005a FFF7FEFF 		bl	Error_Handler
 509              	.LVL19:
 510              	.L28:
 511 005e 00BF     		.align	2
 512              	.L27:
 513 0060 00000000 		.word	hadc1
 514 0064 00200140 		.word	1073815552
 515 0068 0100000F 		.word	251658241
 516              		.cfi_endproc
 517              	.LFE245:
 519              		.section	.text.MX_TIM2_Init,"ax",%progbits
 520              		.align	1
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 525              	MX_TIM2_Init:
 526              	.LFB246:
 233:Core/Src/main.c **** 
 527              		.loc 1 233 1 view -0
 528              		.cfi_startproc
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 36


 529              		@ args = 0, pretend = 0, frame = 24
 530              		@ frame_needed = 0, uses_anonymous_args = 0
 531 0000 00B5     		push	{lr}
 532              		.cfi_def_cfa_offset 4
 533              		.cfi_offset 14, -4
 534 0002 87B0     		sub	sp, sp, #28
 535              		.cfi_def_cfa_offset 32
 239:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 536              		.loc 1 239 3 view .LVU145
 239:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 537              		.loc 1 239 26 is_stmt 0 view .LVU146
 538 0004 0023     		movs	r3, #0
 539 0006 0293     		str	r3, [sp, #8]
 540 0008 0393     		str	r3, [sp, #12]
 541 000a 0493     		str	r3, [sp, #16]
 542 000c 0593     		str	r3, [sp, #20]
 240:Core/Src/main.c **** 
 543              		.loc 1 240 3 is_stmt 1 view .LVU147
 240:Core/Src/main.c **** 
 544              		.loc 1 240 27 is_stmt 0 view .LVU148
 545 000e 0093     		str	r3, [sp]
 546 0010 0193     		str	r3, [sp, #4]
 245:Core/Src/main.c ****   htim2.Init.Prescaler = 1000;
 547              		.loc 1 245 3 is_stmt 1 view .LVU149
 245:Core/Src/main.c ****   htim2.Init.Prescaler = 1000;
 548              		.loc 1 245 18 is_stmt 0 view .LVU150
 549 0012 1448     		ldr	r0, .L37
 550 0014 4FF08042 		mov	r2, #1073741824
 551 0018 0260     		str	r2, [r0]
 246:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 552              		.loc 1 246 3 is_stmt 1 view .LVU151
 246:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 553              		.loc 1 246 24 is_stmt 0 view .LVU152
 554 001a 4FF47A72 		mov	r2, #1000
 555 001e 4260     		str	r2, [r0, #4]
 247:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 556              		.loc 1 247 3 is_stmt 1 view .LVU153
 247:Core/Src/main.c ****   htim2.Init.Period = 4294967295;
 557              		.loc 1 247 26 is_stmt 0 view .LVU154
 558 0020 8360     		str	r3, [r0, #8]
 248:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 559              		.loc 1 248 3 is_stmt 1 view .LVU155
 248:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 560              		.loc 1 248 21 is_stmt 0 view .LVU156
 561 0022 4FF0FF32 		mov	r2, #-1
 562 0026 C260     		str	r2, [r0, #12]
 249:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 563              		.loc 1 249 3 is_stmt 1 view .LVU157
 249:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 564              		.loc 1 249 28 is_stmt 0 view .LVU158
 565 0028 0361     		str	r3, [r0, #16]
 250:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 566              		.loc 1 250 3 is_stmt 1 view .LVU159
 250:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 567              		.loc 1 250 32 is_stmt 0 view .LVU160
 568 002a 8361     		str	r3, [r0, #24]
 251:Core/Src/main.c ****   {
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 37


 569              		.loc 1 251 3 is_stmt 1 view .LVU161
 251:Core/Src/main.c ****   {
 570              		.loc 1 251 7 is_stmt 0 view .LVU162
 571 002c FFF7FEFF 		bl	HAL_TIM_Base_Init
 572              	.LVL20:
 251:Core/Src/main.c ****   {
 573              		.loc 1 251 6 discriminator 1 view .LVU163
 574 0030 90B9     		cbnz	r0, .L34
 255:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 575              		.loc 1 255 3 is_stmt 1 view .LVU164
 255:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 576              		.loc 1 255 34 is_stmt 0 view .LVU165
 577 0032 4FF48053 		mov	r3, #4096
 578 0036 0293     		str	r3, [sp, #8]
 256:Core/Src/main.c ****   {
 579              		.loc 1 256 3 is_stmt 1 view .LVU166
 256:Core/Src/main.c ****   {
 580              		.loc 1 256 7 is_stmt 0 view .LVU167
 581 0038 02A9     		add	r1, sp, #8
 582 003a 0A48     		ldr	r0, .L37
 583 003c FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 584              	.LVL21:
 256:Core/Src/main.c ****   {
 585              		.loc 1 256 6 discriminator 1 view .LVU168
 586 0040 60B9     		cbnz	r0, .L35
 260:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 587              		.loc 1 260 3 is_stmt 1 view .LVU169
 260:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 588              		.loc 1 260 37 is_stmt 0 view .LVU170
 589 0042 0023     		movs	r3, #0
 590 0044 0093     		str	r3, [sp]
 261:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 591              		.loc 1 261 3 is_stmt 1 view .LVU171
 261:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 592              		.loc 1 261 33 is_stmt 0 view .LVU172
 593 0046 0193     		str	r3, [sp, #4]
 262:Core/Src/main.c ****   {
 594              		.loc 1 262 3 is_stmt 1 view .LVU173
 262:Core/Src/main.c ****   {
 595              		.loc 1 262 7 is_stmt 0 view .LVU174
 596 0048 6946     		mov	r1, sp
 597 004a 0648     		ldr	r0, .L37
 598 004c FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 599              	.LVL22:
 262:Core/Src/main.c ****   {
 600              		.loc 1 262 6 discriminator 1 view .LVU175
 601 0050 30B9     		cbnz	r0, .L36
 270:Core/Src/main.c **** 
 602              		.loc 1 270 1 view .LVU176
 603 0052 07B0     		add	sp, sp, #28
 604              		.cfi_remember_state
 605              		.cfi_def_cfa_offset 4
 606              		@ sp needed
 607 0054 5DF804FB 		ldr	pc, [sp], #4
 608              	.L34:
 609              		.cfi_restore_state
 253:Core/Src/main.c ****   }
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 38


 610              		.loc 1 253 5 is_stmt 1 view .LVU177
 611 0058 FFF7FEFF 		bl	Error_Handler
 612              	.LVL23:
 613              	.L35:
 258:Core/Src/main.c ****   }
 614              		.loc 1 258 5 view .LVU178
 615 005c FFF7FEFF 		bl	Error_Handler
 616              	.LVL24:
 617              	.L36:
 264:Core/Src/main.c ****   }
 618              		.loc 1 264 5 view .LVU179
 619 0060 FFF7FEFF 		bl	Error_Handler
 620              	.LVL25:
 621              	.L38:
 622              		.align	2
 623              	.L37:
 624 0064 00000000 		.word	htim2
 625              		.cfi_endproc
 626              	.LFE246:
 628              		.section	.text.MX_TIM3_Init,"ax",%progbits
 629              		.align	1
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 634              	MX_TIM3_Init:
 635              	.LFB247:
 278:Core/Src/main.c **** 
 636              		.loc 1 278 1 view -0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 24
 639              		@ frame_needed = 0, uses_anonymous_args = 0
 640 0000 00B5     		push	{lr}
 641              		.cfi_def_cfa_offset 4
 642              		.cfi_offset 14, -4
 643 0002 87B0     		sub	sp, sp, #28
 644              		.cfi_def_cfa_offset 32
 284:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 645              		.loc 1 284 3 view .LVU181
 284:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 646              		.loc 1 284 26 is_stmt 0 view .LVU182
 647 0004 0023     		movs	r3, #0
 648 0006 0293     		str	r3, [sp, #8]
 649 0008 0393     		str	r3, [sp, #12]
 650 000a 0493     		str	r3, [sp, #16]
 651 000c 0593     		str	r3, [sp, #20]
 285:Core/Src/main.c **** 
 652              		.loc 1 285 3 is_stmt 1 view .LVU183
 285:Core/Src/main.c **** 
 653              		.loc 1 285 27 is_stmt 0 view .LVU184
 654 000e 0093     		str	r3, [sp]
 655 0010 0193     		str	r3, [sp, #4]
 290:Core/Src/main.c ****   htim3.Init.Prescaler = 50;
 656              		.loc 1 290 3 is_stmt 1 view .LVU185
 290:Core/Src/main.c ****   htim3.Init.Prescaler = 50;
 657              		.loc 1 290 18 is_stmt 0 view .LVU186
 658 0012 1348     		ldr	r0, .L47
 659 0014 134A     		ldr	r2, .L47+4
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 39


 660 0016 0260     		str	r2, [r0]
 291:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 661              		.loc 1 291 3 is_stmt 1 view .LVU187
 291:Core/Src/main.c ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 662              		.loc 1 291 24 is_stmt 0 view .LVU188
 663 0018 3222     		movs	r2, #50
 664 001a 4260     		str	r2, [r0, #4]
 292:Core/Src/main.c ****   htim3.Init.Period = 65535;
 665              		.loc 1 292 3 is_stmt 1 view .LVU189
 292:Core/Src/main.c ****   htim3.Init.Period = 65535;
 666              		.loc 1 292 26 is_stmt 0 view .LVU190
 667 001c 8360     		str	r3, [r0, #8]
 293:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 668              		.loc 1 293 3 is_stmt 1 view .LVU191
 293:Core/Src/main.c ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 669              		.loc 1 293 21 is_stmt 0 view .LVU192
 670 001e 4FF6FF72 		movw	r2, #65535
 671 0022 C260     		str	r2, [r0, #12]
 294:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 672              		.loc 1 294 3 is_stmt 1 view .LVU193
 294:Core/Src/main.c ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 673              		.loc 1 294 28 is_stmt 0 view .LVU194
 674 0024 0361     		str	r3, [r0, #16]
 295:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 675              		.loc 1 295 3 is_stmt 1 view .LVU195
 295:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 676              		.loc 1 295 32 is_stmt 0 view .LVU196
 677 0026 8361     		str	r3, [r0, #24]
 296:Core/Src/main.c ****   {
 678              		.loc 1 296 3 is_stmt 1 view .LVU197
 296:Core/Src/main.c ****   {
 679              		.loc 1 296 7 is_stmt 0 view .LVU198
 680 0028 FFF7FEFF 		bl	HAL_TIM_Base_Init
 681              	.LVL26:
 296:Core/Src/main.c ****   {
 682              		.loc 1 296 6 discriminator 1 view .LVU199
 683 002c 90B9     		cbnz	r0, .L44
 300:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 684              		.loc 1 300 3 is_stmt 1 view .LVU200
 300:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 685              		.loc 1 300 34 is_stmt 0 view .LVU201
 686 002e 4FF48053 		mov	r3, #4096
 687 0032 0293     		str	r3, [sp, #8]
 301:Core/Src/main.c ****   {
 688              		.loc 1 301 3 is_stmt 1 view .LVU202
 301:Core/Src/main.c ****   {
 689              		.loc 1 301 7 is_stmt 0 view .LVU203
 690 0034 02A9     		add	r1, sp, #8
 691 0036 0A48     		ldr	r0, .L47
 692 0038 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 693              	.LVL27:
 301:Core/Src/main.c ****   {
 694              		.loc 1 301 6 discriminator 1 view .LVU204
 695 003c 60B9     		cbnz	r0, .L45
 305:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 696              		.loc 1 305 3 is_stmt 1 view .LVU205
 305:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 40


 697              		.loc 1 305 37 is_stmt 0 view .LVU206
 698 003e 0023     		movs	r3, #0
 699 0040 0093     		str	r3, [sp]
 306:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 700              		.loc 1 306 3 is_stmt 1 view .LVU207
 306:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 701              		.loc 1 306 33 is_stmt 0 view .LVU208
 702 0042 0193     		str	r3, [sp, #4]
 307:Core/Src/main.c ****   {
 703              		.loc 1 307 3 is_stmt 1 view .LVU209
 307:Core/Src/main.c ****   {
 704              		.loc 1 307 7 is_stmt 0 view .LVU210
 705 0044 6946     		mov	r1, sp
 706 0046 0648     		ldr	r0, .L47
 707 0048 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 708              	.LVL28:
 307:Core/Src/main.c ****   {
 709              		.loc 1 307 6 discriminator 1 view .LVU211
 710 004c 30B9     		cbnz	r0, .L46
 315:Core/Src/main.c **** 
 711              		.loc 1 315 1 view .LVU212
 712 004e 07B0     		add	sp, sp, #28
 713              		.cfi_remember_state
 714              		.cfi_def_cfa_offset 4
 715              		@ sp needed
 716 0050 5DF804FB 		ldr	pc, [sp], #4
 717              	.L44:
 718              		.cfi_restore_state
 298:Core/Src/main.c ****   }
 719              		.loc 1 298 5 is_stmt 1 view .LVU213
 720 0054 FFF7FEFF 		bl	Error_Handler
 721              	.LVL29:
 722              	.L45:
 303:Core/Src/main.c ****   }
 723              		.loc 1 303 5 view .LVU214
 724 0058 FFF7FEFF 		bl	Error_Handler
 725              	.LVL30:
 726              	.L46:
 309:Core/Src/main.c ****   }
 727              		.loc 1 309 5 view .LVU215
 728 005c FFF7FEFF 		bl	Error_Handler
 729              	.LVL31:
 730              	.L48:
 731              		.align	2
 732              	.L47:
 733 0060 00000000 		.word	htim3
 734 0064 00040040 		.word	1073742848
 735              		.cfi_endproc
 736              	.LFE247:
 738              		.section	.text.SystemClock_Config,"ax",%progbits
 739              		.align	1
 740              		.global	SystemClock_Config
 741              		.syntax unified
 742              		.thumb
 743              		.thumb_func
 745              	SystemClock_Config:
 746              	.LFB244:
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 41


 133:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 747              		.loc 1 133 1 view -0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 80
 750              		@ frame_needed = 0, uses_anonymous_args = 0
 751 0000 00B5     		push	{lr}
 752              		.cfi_def_cfa_offset 4
 753              		.cfi_offset 14, -4
 754 0002 95B0     		sub	sp, sp, #84
 755              		.cfi_def_cfa_offset 88
 134:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 756              		.loc 1 134 3 view .LVU217
 134:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 757              		.loc 1 134 22 is_stmt 0 view .LVU218
 758 0004 3422     		movs	r2, #52
 759 0006 0021     		movs	r1, #0
 760 0008 07A8     		add	r0, sp, #28
 761 000a FFF7FEFF 		bl	memset
 762              	.LVL32:
 135:Core/Src/main.c **** 
 763              		.loc 1 135 3 is_stmt 1 view .LVU219
 135:Core/Src/main.c **** 
 764              		.loc 1 135 22 is_stmt 0 view .LVU220
 765 000e 0023     		movs	r3, #0
 766 0010 0293     		str	r3, [sp, #8]
 767 0012 0393     		str	r3, [sp, #12]
 768 0014 0493     		str	r3, [sp, #16]
 769 0016 0593     		str	r3, [sp, #20]
 770 0018 0693     		str	r3, [sp, #24]
 139:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 771              		.loc 1 139 3 is_stmt 1 view .LVU221
 772              	.LBB11:
 139:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 773              		.loc 1 139 3 view .LVU222
 774 001a 0093     		str	r3, [sp]
 139:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 775              		.loc 1 139 3 view .LVU223
 776 001c 1F4A     		ldr	r2, .L55
 777 001e 116C     		ldr	r1, [r2, #64]
 778 0020 41F08051 		orr	r1, r1, #268435456
 779 0024 1164     		str	r1, [r2, #64]
 139:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 780              		.loc 1 139 3 view .LVU224
 781 0026 126C     		ldr	r2, [r2, #64]
 782 0028 02F08052 		and	r2, r2, #268435456
 783 002c 0092     		str	r2, [sp]
 139:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 784              		.loc 1 139 3 view .LVU225
 785 002e 009A     		ldr	r2, [sp]
 786              	.LBE11:
 139:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 787              		.loc 1 139 3 view .LVU226
 140:Core/Src/main.c **** 
 788              		.loc 1 140 3 view .LVU227
 789              	.LBB12:
 140:Core/Src/main.c **** 
 790              		.loc 1 140 3 view .LVU228
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 42


 791 0030 0193     		str	r3, [sp, #4]
 140:Core/Src/main.c **** 
 792              		.loc 1 140 3 view .LVU229
 793 0032 1B49     		ldr	r1, .L55+4
 794 0034 0A68     		ldr	r2, [r1]
 795 0036 22F44042 		bic	r2, r2, #49152
 796 003a 42F48042 		orr	r2, r2, #16384
 797 003e 0A60     		str	r2, [r1]
 140:Core/Src/main.c **** 
 798              		.loc 1 140 3 view .LVU230
 799 0040 0A68     		ldr	r2, [r1]
 800 0042 02F44042 		and	r2, r2, #49152
 801 0046 0192     		str	r2, [sp, #4]
 140:Core/Src/main.c **** 
 802              		.loc 1 140 3 view .LVU231
 803 0048 019A     		ldr	r2, [sp, #4]
 804              	.LBE12:
 140:Core/Src/main.c **** 
 805              		.loc 1 140 3 view .LVU232
 145:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 806              		.loc 1 145 3 view .LVU233
 145:Core/Src/main.c ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 807              		.loc 1 145 36 is_stmt 0 view .LVU234
 808 004a 0222     		movs	r2, #2
 809 004c 0792     		str	r2, [sp, #28]
 146:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 810              		.loc 1 146 3 is_stmt 1 view .LVU235
 146:Core/Src/main.c ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 811              		.loc 1 146 30 is_stmt 0 view .LVU236
 812 004e 0121     		movs	r1, #1
 813 0050 0A91     		str	r1, [sp, #40]
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 814              		.loc 1 147 3 is_stmt 1 view .LVU237
 147:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 815              		.loc 1 147 41 is_stmt 0 view .LVU238
 816 0052 1021     		movs	r1, #16
 817 0054 0B91     		str	r1, [sp, #44]
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 818              		.loc 1 148 3 is_stmt 1 view .LVU239
 148:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 819              		.loc 1 148 34 is_stmt 0 view .LVU240
 820 0056 0D92     		str	r2, [sp, #52]
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 821              		.loc 1 149 3 is_stmt 1 view .LVU241
 149:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 16;
 822              		.loc 1 149 35 is_stmt 0 view .LVU242
 823 0058 0E93     		str	r3, [sp, #56]
 150:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 824              		.loc 1 150 3 is_stmt 1 view .LVU243
 150:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 336;
 825              		.loc 1 150 30 is_stmt 0 view .LVU244
 826 005a 0F91     		str	r1, [sp, #60]
 151:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 827              		.loc 1 151 3 is_stmt 1 view .LVU245
 151:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 828              		.loc 1 151 30 is_stmt 0 view .LVU246
 829 005c 4FF4A873 		mov	r3, #336
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 43


 830 0060 1093     		str	r3, [sp, #64]
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 831              		.loc 1 152 3 is_stmt 1 view .LVU247
 152:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 832              		.loc 1 152 30 is_stmt 0 view .LVU248
 833 0062 0423     		movs	r3, #4
 834 0064 1193     		str	r3, [sp, #68]
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 835              		.loc 1 153 3 is_stmt 1 view .LVU249
 153:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 836              		.loc 1 153 30 is_stmt 0 view .LVU250
 837 0066 1292     		str	r2, [sp, #72]
 154:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 838              		.loc 1 154 3 is_stmt 1 view .LVU251
 154:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 839              		.loc 1 154 30 is_stmt 0 view .LVU252
 840 0068 1392     		str	r2, [sp, #76]
 155:Core/Src/main.c ****   {
 841              		.loc 1 155 3 is_stmt 1 view .LVU253
 155:Core/Src/main.c ****   {
 842              		.loc 1 155 7 is_stmt 0 view .LVU254
 843 006a 07A8     		add	r0, sp, #28
 844 006c FFF7FEFF 		bl	HAL_RCC_OscConfig
 845              	.LVL33:
 155:Core/Src/main.c ****   {
 846              		.loc 1 155 6 discriminator 1 view .LVU255
 847 0070 80B9     		cbnz	r0, .L53
 162:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 848              		.loc 1 162 3 is_stmt 1 view .LVU256
 162:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 849              		.loc 1 162 31 is_stmt 0 view .LVU257
 850 0072 0F23     		movs	r3, #15
 851 0074 0293     		str	r3, [sp, #8]
 164:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 852              		.loc 1 164 3 is_stmt 1 view .LVU258
 164:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 853              		.loc 1 164 34 is_stmt 0 view .LVU259
 854 0076 0221     		movs	r1, #2
 855 0078 0391     		str	r1, [sp, #12]
 165:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 856              		.loc 1 165 3 is_stmt 1 view .LVU260
 165:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 857              		.loc 1 165 35 is_stmt 0 view .LVU261
 858 007a 0023     		movs	r3, #0
 859 007c 0493     		str	r3, [sp, #16]
 166:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 860              		.loc 1 166 3 is_stmt 1 view .LVU262
 166:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 861              		.loc 1 166 36 is_stmt 0 view .LVU263
 862 007e 4FF48052 		mov	r2, #4096
 863 0082 0592     		str	r2, [sp, #20]
 167:Core/Src/main.c **** 
 864              		.loc 1 167 3 is_stmt 1 view .LVU264
 167:Core/Src/main.c **** 
 865              		.loc 1 167 36 is_stmt 0 view .LVU265
 866 0084 0693     		str	r3, [sp, #24]
 169:Core/Src/main.c ****   {
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 44


 867              		.loc 1 169 3 is_stmt 1 view .LVU266
 169:Core/Src/main.c ****   {
 868              		.loc 1 169 7 is_stmt 0 view .LVU267
 869 0086 02A8     		add	r0, sp, #8
 870 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 871              	.LVL34:
 169:Core/Src/main.c ****   {
 872              		.loc 1 169 6 discriminator 1 view .LVU268
 873 008c 20B9     		cbnz	r0, .L54
 173:Core/Src/main.c **** 
 874              		.loc 1 173 1 view .LVU269
 875 008e 15B0     		add	sp, sp, #84
 876              		.cfi_remember_state
 877              		.cfi_def_cfa_offset 4
 878              		@ sp needed
 879 0090 5DF804FB 		ldr	pc, [sp], #4
 880              	.L53:
 881              		.cfi_restore_state
 157:Core/Src/main.c ****   }
 882              		.loc 1 157 5 is_stmt 1 view .LVU270
 883 0094 FFF7FEFF 		bl	Error_Handler
 884              	.LVL35:
 885              	.L54:
 171:Core/Src/main.c ****   }
 886              		.loc 1 171 5 view .LVU271
 887 0098 FFF7FEFF 		bl	Error_Handler
 888              	.LVL36:
 889              	.L56:
 890              		.align	2
 891              	.L55:
 892 009c 00380240 		.word	1073887232
 893 00a0 00700040 		.word	1073770496
 894              		.cfi_endproc
 895              	.LFE244:
 897              		.section	.text.main,"ax",%progbits
 898              		.align	1
 899              		.global	main
 900              		.syntax unified
 901              		.thumb
 902              		.thumb_func
 904              	main:
 905              	.LFB243:
  83:Core/Src/main.c **** 
 906              		.loc 1 83 1 view -0
 907              		.cfi_startproc
 908              		@ Volatile: function does not return.
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 911 0000 08B5     		push	{r3, lr}
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 3, -8
 914              		.cfi_offset 14, -4
  92:Core/Src/main.c **** 
 915              		.loc 1 92 3 view .LVU273
 916 0002 FFF7FEFF 		bl	HAL_Init
 917              	.LVL37:
  95:Core/Src/main.c ****   /* USER CODE END Init */
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 45


 918              		.loc 1 95 3 view .LVU274
 919 0006 0B4C     		ldr	r4, .L60
 920 0008 2046     		mov	r0, r4
 921 000a FFF7FEFF 		bl	fsm_init
 922              	.LVL38:
  99:Core/Src/main.c **** 
 923              		.loc 1 99 3 view .LVU275
 924 000e FFF7FEFF 		bl	SystemClock_Config
 925              	.LVL39:
 106:Core/Src/main.c ****   MX_DMA_Init();
 926              		.loc 1 106 3 view .LVU276
 927 0012 FFF7FEFF 		bl	MX_GPIO_Init
 928              	.LVL40:
 107:Core/Src/main.c ****   MX_USART2_UART_Init();
 929              		.loc 1 107 3 view .LVU277
 930 0016 FFF7FEFF 		bl	MX_DMA_Init
 931              	.LVL41:
 108:Core/Src/main.c ****   MX_ADC1_Init();
 932              		.loc 1 108 3 view .LVU278
 933 001a FFF7FEFF 		bl	MX_USART2_UART_Init
 934              	.LVL42:
 109:Core/Src/main.c ****   MX_TIM2_Init();
 935              		.loc 1 109 3 view .LVU279
 936 001e FFF7FEFF 		bl	MX_ADC1_Init
 937              	.LVL43:
 110:Core/Src/main.c ****   MX_TIM3_Init();
 938              		.loc 1 110 3 view .LVU280
 939 0022 FFF7FEFF 		bl	MX_TIM2_Init
 940              	.LVL44:
 111:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 941              		.loc 1 111 3 view .LVU281
 942 0026 FFF7FEFF 		bl	MX_TIM3_Init
 943              	.LVL45:
 113:Core/Src/main.c ****   /* USER CODE END 2 */
 944              		.loc 1 113 3 view .LVU282
 945 002a 2046     		mov	r0, r4
 946 002c FFF7FEFF 		bl	fsm_run
 947              	.LVL46:
 948              	.L58:
 118:Core/Src/main.c ****   {
 949              		.loc 1 118 3 view .LVU283
 124:Core/Src/main.c ****   /* USER CODE END 3 */
 950              		.loc 1 124 3 view .LVU284
 118:Core/Src/main.c ****   {
 951              		.loc 1 118 9 view .LVU285
 952 0030 FEE7     		b	.L58
 953              	.L61:
 954 0032 00BF     		.align	2
 955              	.L60:
 956 0034 00000000 		.word	fsm
 957              		.cfi_endproc
 958              	.LFE243:
 960              		.global	fsm
 961              		.section	.bss.fsm,"aw",%nobits
 962              		.align	2
 965              	fsm:
 966 0000 00       		.space	1
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 46


 967              		.global	adc_value
 968              		.section	.bss.adc_value,"aw",%nobits
 969              		.align	2
 972              	adc_value:
 973 0000 00000000 		.space	4
 974              		.global	huart2
 975              		.section	.bss.huart2,"aw",%nobits
 976              		.align	2
 979              	huart2:
 980 0000 00000000 		.space	72
 980      00000000 
 980      00000000 
 980      00000000 
 980      00000000 
 981              		.global	htim3
 982              		.section	.bss.htim3,"aw",%nobits
 983              		.align	2
 986              	htim3:
 987 0000 00000000 		.space	72
 987      00000000 
 987      00000000 
 987      00000000 
 987      00000000 
 988              		.global	htim2
 989              		.section	.bss.htim2,"aw",%nobits
 990              		.align	2
 993              	htim2:
 994 0000 00000000 		.space	72
 994      00000000 
 994      00000000 
 994      00000000 
 994      00000000 
 995              		.global	hdma_adc1
 996              		.section	.bss.hdma_adc1,"aw",%nobits
 997              		.align	2
 1000              	hdma_adc1:
 1001 0000 00000000 		.space	96
 1001      00000000 
 1001      00000000 
 1001      00000000 
 1001      00000000 
 1002              		.global	hadc1
 1003              		.section	.bss.hadc1,"aw",%nobits
 1004              		.align	2
 1007              	hadc1:
 1008 0000 00000000 		.space	72
 1008      00000000 
 1008      00000000 
 1008      00000000 
 1008      00000000 
 1009              		.global	adc_buffer
 1010              		.section	.bss.adc_buffer,"aw",%nobits
 1011              		.align	2
 1014              	adc_buffer:
 1015 0000 00000000 		.space	4
 1016              		.text
 1017              	.Letext0:
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 47


 1018              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1019              		.file 4 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1020              		.file 5 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1021              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1022              		.file 7 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-to
 1023              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1024              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1025              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1026              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1027              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1028              		.file 13 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_adc.h"
 1029              		.file 14 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1030              		.file 15 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1031              		.file 16 "Core/Inc/fsm_controller.h"
 1032              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim_ex.h"
 1033              		.file 18 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_cortex.h"
 1034              		.file 19 "C:/Users/valer/AppData/Roaming/Code/User/globalStorage/bmd.stm32-for-vscode/@xpack-dev-t
 1035              		.file 20 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1036              		.file 21 "<built-in>"
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 48


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:21     .text.MX_GPIO_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:26     .text.MX_GPIO_Init:00000000 MX_GPIO_Init
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:198    .text.MX_GPIO_Init:000000cc $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:205    .text.MX_DMA_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:210    .text.MX_DMA_Init:00000000 MX_DMA_Init
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:256    .text.MX_DMA_Init:00000030 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:261    .text.send_to_serial:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:267    .text.send_to_serial:00000000 send_to_serial
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:298    .text.send_to_serial:00000018 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:979    .bss.huart2:00000000 huart2
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:303    .text.Error_Handler:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:309    .text.Error_Handler:00000000 Error_Handler
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:341    .text.MX_USART2_UART_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:346    .text.MX_USART2_UART_Init:00000000 MX_USART2_UART_Init
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:400    .text.MX_USART2_UART_Init:0000002c $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:406    .text.MX_ADC1_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:411    .text.MX_ADC1_Init:00000000 MX_ADC1_Init
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:513    .text.MX_ADC1_Init:00000060 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:1007   .bss.hadc1:00000000 hadc1
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:520    .text.MX_TIM2_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:525    .text.MX_TIM2_Init:00000000 MX_TIM2_Init
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:624    .text.MX_TIM2_Init:00000064 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:993    .bss.htim2:00000000 htim2
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:629    .text.MX_TIM3_Init:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:634    .text.MX_TIM3_Init:00000000 MX_TIM3_Init
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:733    .text.MX_TIM3_Init:00000060 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:986    .bss.htim3:00000000 htim3
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:739    .text.SystemClock_Config:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:745    .text.SystemClock_Config:00000000 SystemClock_Config
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:892    .text.SystemClock_Config:0000009c $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:898    .text.main:00000000 $t
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:904    .text.main:00000000 main
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:956    .text.main:00000034 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:965    .bss.fsm:00000000 fsm
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:962    .bss.fsm:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:972    .bss.adc_value:00000000 adc_value
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:969    .bss.adc_value:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:976    .bss.huart2:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:983    .bss.htim3:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:990    .bss.htim2:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:1000   .bss.hdma_adc1:00000000 hdma_adc1
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:997    .bss.hdma_adc1:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:1004   .bss.hadc1:00000000 $d
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:1014   .bss.adc_buffer:00000000 adc_buffer
C:\Users\valer\AppData\Local\Temp\ccZoin4v.s:1011   .bss.adc_buffer:00000000 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
strlen
HAL_UART_Transmit
HAL_UART_Init
HAL_ADC_Init
ARM GAS  C:\Users\valer\AppData\Local\Temp\ccZoin4v.s 			page 49


HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
fsm_init
fsm_run
